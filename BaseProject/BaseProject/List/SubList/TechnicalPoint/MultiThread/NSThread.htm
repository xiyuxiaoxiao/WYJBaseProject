<!DOCTYPE html><html class="theme-next mist use-motion" lang="zh-Hans"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><meta name="google-site-verification" content="GyyB4ty6fbJ2kyKf5PgfMYDshIzkpt4YdoyQhgEd3aM"><meta name="baidu-site-verification" content="zksrRIyR31"><link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css"><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css"><link href="/css/main.css?v=5.1.3" rel="stylesheet" type="text/css"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-bear.png?v=5.1.3"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-bear.png?v=5.1.3"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-bear.png?v=5.1.3"><link rel="mask-icon" href="/images/logo-bear.svg?v=5.1.3" color="#222"><meta name="title" content="不羁阁 | Walking Boy's Blog"><meta name="keywords" content="iOS开发,iOS多线程,"><link rel="alternate" href="/atom.xml" title="不羁阁 | Walking Boy's Blog" type="application/atom+xml"><script>!function(e,t,o,c,i,a,n){e.DaoVoiceObject=i,e[i]=e[i]||function(){(e[i].q=e[i].q||[]).push(arguments)},e[i].l=1*new Date,a=t.createElement("script"),n=t.getElementsByTagName("script")[0],a.async=1,a.src=c,a.charset="utf-8",n.parentNode.insertBefore(a,n)}(window,document,0,(document.location.protocol,"https://widget.daovoice.io/widget/0f81ff2f.js"),"daovoice"),daovoice("init",{app_id:"47635346"}),daovoice("update")</script><meta name="description" content="本文用来介绍 iOS 多线程中，pthread、NSThread 的使用方法及实现。第一部分：pthread 的使用、其他相关方法。第二部分：NSThread 的使用、线程相关用法、线程状态控制方法、线程之间的通信、线程安全和线程同步，以及线程的状态转换相关知识。"><meta name="keywords" content="iOS开发,iOS多线程"><meta property="og:type" content="article"><meta property="og:title" content="iOS多线程：『pthread、NSThread』详尽总结"><meta property="og:url" content="https://www.bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html"><meta property="og:site_name" content="不羁阁 | Walking Boy&#39;s Blog"><meta property="og:description" content="本文用来介绍 iOS 多线程中，pthread、NSThread 的使用方法及实现。第一部分：pthread 的使用、其他相关方法。第二部分：NSThread 的使用、线程相关用法、线程状态控制方法、线程之间的通信、线程安全和线程同步，以及线程的状态转换相关知识。"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-background.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-NotSave.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-Save.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-Save1.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange1.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange2.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange3.png"><meta property="og:updated_time" content="2018-03-12T06:15:29.454Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="iOS多线程：『pthread、NSThread』详尽总结"><meta name="twitter:description" content="本文用来介绍 iOS 多线程中，pthread、NSThread 的使用方法及实现。第一部分：pthread 的使用、其他相关方法。第二部分：NSThread 的使用、线程相关用法、线程状态控制方法、线程之间的通信、线程安全和线程同步，以及线程的状态转换相关知识。"><meta name="twitter:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-background.png"><script type="text/javascript" id="hexo.configurations">var NexT=window.NexT||{},CONFIG={root:"/",scheme:"Mist",version:"5.1.3",sidebar:{display:"always",offset:12,b2t:!1,scrollpercent:!0,onmobile:!0},fancybox:!0,tabs:!0,motion:{enable:!0,async:!1,transition:{post_block:"fadeIn",post_header:"slideDownIn",post_body:"slideDownIn",coll_header:"slideLeftIn",sidebar:"slideUpIn"}},duoshuo:{userId:"0",author:"博主"},algolia:{applicationID:"ZB8N71FUJS",apiKey:"2c4a57312b1f34fef40c237b6a387b5b",indexName:"hexoBlogSearch",hits:{per_page:10},labels:{input_placeholder:"请输入关键字",hits_empty:"没有找到与 [${query}] 相关的内容",hits_stats:"${hits} 条相关记录，共耗时 ${time} ms"}}}</script><link rel="canonical" href="https://www.bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html"><title>iOS多线程：『pthread、NSThread』详尽总结 | 不羁阁 | Walking Boy's Blog</title><script type="text/javascript">var _hmt=_hmt||[];!function(){var e=document.createElement("script");e.src="https://hm.baidu.com/hm.js?8328f8ab104607263ab419414db4793d";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()</script></head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans"><div class="container page-post-detail"><div class="headband"></div><header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="header-inner"><div class="site-brand-wrapper"><div class="site-meta"><div class="custom-logo-site-title"><a href="/" class="brand" rel="start"><span class="logo-line-before"><i></i></span> <span class="site-title">不羁阁 | Walking Boy's Blog</span><span class="logo-line-after"><i></i></span></a></div><h1 class="site-subtitle" itemprop="description">不羁，谓才行高远，不可羁系也。</h1></div><div class="site-nav-toggle"> <button><span class="btn-bar"></span><span class="btn-bar"></span><span class="btn-bar"></span></button></div></div><nav class="site-nav"><ul id="menu" class="menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="menu-item-icon fa fa-fw fa-home"></i><br> 首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="menu-item-icon fa fa-fw fa-user"></i><br> 关于</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="menu-item-icon fa fa-fw fa-th"></i><br> 分类</a></li><li class="menu-item menu-item-archives"><a href="/blog/" rel="section"><i class="menu-item-icon fa fa-fw fa-archive"></i><br> 归档</a></li><li class="menu-item menu-item-search"><a href="javascript:;" class="popup-trigger"><i class="menu-item-icon fa fa-search fa-fw"></i><br> 搜索</a></li></ul><div class="site-search"><div class="algolia-popup popup search-popup"><div class="algolia-search"><div class="algolia-search-input-icon"><i class="fa fa-search"></i></div><div class="algolia-search-input" id="algolia-search-input"></div></div><div class="algolia-results"><div id="algolia-stats"></div><div id="algolia-hits"></div><div id="algolia-pagination" class="algolia-pagination"></div></div><span class="popup-btn-close"><i class="fa fa-times-circle"></i></span></div></div></nav></div></header><main id="main" class="main"><div class="main-inner"><div class="content-wrap"><div id="content" class="content"><div id="posts" class="posts-expand"><article class="post post-type-normal" itemscope itemtype="http://schema.org/Article"><div class="post-block"><link itemprop="mainEntityOfPage" href="https://www.bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="name" content="Walking Boy"><meta itemprop="description" content="不羁，谓才行高远，不可羁系也。"><meta itemprop="image" content="/images/avatar.png"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="不羁阁 | Walking Boy's Blog"></span><header class="post-header"><h2 class="post-title" itemprop="name headline">iOS多线程：『pthread、NSThread』详尽总结</h2><div class="post-meta"><span class="post-time"><span class="post-meta-item-icon"><i class="fa fa-calendar-o"></i></span> <span class="post-meta-item-text">发表于</span> <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-01-26T13:42:11+08:00">2018-01-26</time></span> <span class="post-category"><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-folder-o"></i></span> <span class="post-meta-item-text">分类于</span> <span itemprop="about" itemscope itemtype="http://schema.org/Thing"><a href="/categories/iOS开发/" itemprop="url" rel="index"><span itemprop="name">iOS开发</span></a></span></span> <span id="/blog/iOS-Complete-learning-pthread-and-NSThread.html" class="leancloud_visitors" data-flag-title="iOS多线程：『pthread、NSThread』详尽总结"><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-eye"></i></span> <span class="post-meta-item-text">阅读次数&#58;</span><span class="leancloud-visitors-count"></span></span><div class="post-wordcount"><span class="post-meta-item-icon"><i class="fa fa-file-word-o"></i></span> <span class="post-meta-item-text">字数统计&#58;</span> <span title="字数统计">3,259 字</span> <span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-clock-o"></i></span> <span class="post-meta-item-text">阅读时长 &asymp;</span> <span title="阅读时长">13 分钟</span></div></div></header><div class="post-body" itemprop="articleBody"><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-background.png" alt=""></p><blockquote><p>本文用来介绍 iOS 多线程中，<strong>pthread、NSThread</strong> 的使用方法及实现。<br>第一部分：pthread 的使用、其他相关方法。<br>第二部分：NSThread 的使用、线程相关用法、线程状态控制方法、线程之间的通信、线程安全和线程同步，以及线程的状态转换相关知识。</p></blockquote><a id="more"></a><blockquote><p>文中 Demo 我已放在了 Github 上，Demo 链接：<a href="https://github.com/bujige/YSC-pthread-NSThread-demo" target="_blank" rel="noopener">传送门</a></p></blockquote><h1 id="1-pthread"><a href="#1-pthread" class="headerlink" title="1. pthread"></a>1. pthread</h1><h2 id="1-1-pthread-简介"><a href="#1-1-pthread-简介" class="headerlink" title="1.1 pthread 简介"></a>1.1 pthread 简介</h2><p>pthread 是一套通用的多线程的 API，可以在Unix / Linux / Windows 等系统跨平台使用，使用 C 语言编写，需要程序员自己管理线程的生命周期，使用难度较大，我们在 iOS 开发中几乎不使用 pthread，但是还是来可以了解一下的。</p><blockquote><p>引自 <a href="https://baike.baidu.com/item/Pthread" target="_blank" rel="noopener">百度百科</a><br>POSIX 线程（POSIX threads），简称 Pthreads，是线程的 POSIX 标准。该标准定义了创建和操纵线程的一整套 API。在类Unix操作系统（Unix、Linux、Mac OS X等）中，都使用 Pthreads 作为操作系统的线程。Windows 操作系统也有其移植版 pthreads-win32。</p><p>引自 <a href="https://zh.wikipedia.org/wiki/POSIX%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener">维基百科</a><br>POSIX 线程（英语：POSIX Threads，常被缩写 为 Pthreads）是 POSIX 的线程标准，定义了创建和操纵线程的一套 API。<br>实现 POSIX 线程标准的库常被称作 Pthreads，一般用于 Unix-like POSIX 系统，如 Linux、Solaris。但是 Microsoft Windows 上的实现也存在，例如直接使用 Windows API 实现的第三方库 pthreads-w32；而利用 Windows 的 SFU/SUA 子系统，则可以使用微软提供的一部分原生 POSIX API。</p></blockquote><h2 id="1-2-pthread-使用方法"><a href="#1-2-pthread-使用方法" class="headerlink" title="1.2 pthread 使用方法"></a>1.2 pthread 使用方法</h2><ol><li>首先要包含头文件<code>#import &lt;pthread.h&gt;</code></li><li>其次要创建线程，并开启线程执行任务</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建线程: 定义一个pthread_t类型变量</span></span><br><span class="line">pthread_t thread;</span><br><span class="line"><span class="comment">// 2. 开启线程: 执行任务</span></span><br><span class="line">pthread_create(&amp;thread, <span class="literal">NULL</span>, run, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 3. 设置子线程的状态设置为 detached，该线程运行结束后会自动释放所有资源</span></span><br><span class="line">pthread_detach(thread);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> * run(<span class="keyword">void</span> *param)    <span class="comment">// 新线程调用方法，里边为需要执行的任务</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>pthread_create(&amp;thread, NULL, run, NULL);</code> 中各项参数含义：</li><li>第一个参数<code>&amp;thread</code>是线程对象，指向线程标识符的指针</li><li>第二个是线程属性，可赋值<code>NULL</code></li><li>第三个<code>run</code>表示指向函数的指针(run对应函数里是需要在新线程中执行的任务)</li><li>第四个是运行函数的参数，可赋值<code>NULL</code></li></ul><h2 id="1-3-pthread-其他相关方法"><a href="#1-3-pthread-其他相关方法" class="headerlink" title="1.3 pthread 其他相关方法"></a>1.3 pthread 其他相关方法</h2><ul><li><code>pthread_create()</code> 创建一个线程</li><li><code>pthread_exit()</code> 终止当前线程</li><li><code>pthread_cancel()</code> 中断另外一个线程的运行</li><li><code>pthread_join()</code> 阻塞当前的线程，直到另外一个线程运行结束</li><li><code>pthread_attr_init()</code> 初始化线程的属性</li><li><code>pthread_attr_setdetachstate()</code> 设置脱离状态的属性（决定这个线程在终止时是否可以被结合）</li><li><code>pthread_attr_getdetachstate()</code> 获取脱离状态的属性</li><li><code>pthread_attr_destroy()</code> 删除线程的属性</li><li><code>pthread_kill()</code> 向线程发送一个信号</li></ul><hr><h1 id="2-NSThread"><a href="#2-NSThread" class="headerlink" title="2. NSThread"></a>2. NSThread</h1><p>NSThread 是苹果官方提供的，使用起来比 pthread 更加面向对象，简单易用，可以直接操作线程对象。不过也需要需要程序员自己管理线程的生命周期(主要是创建)，我们在开发的过程中偶尔使用 NSThread。比如我们会经常调用<code>[NSThread currentThread]</code>来显示当前的进程信息。</p><p>下边我们说说 NSThread 如何使用。</p><h2 id="2-1-创建、启动线程"><a href="#2-1-创建、启动线程" class="headerlink" title="2.1 创建、启动线程"></a>2.1 创建、启动线程</h2><ul><li>先创建线程，再启动线程</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建线程</span></span><br><span class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(run) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="comment">// 2. 启动线程</span></span><br><span class="line">[thread start];    <span class="comment">// 线程一启动，就会在线程thread中执行self的run方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新线程调用方法，里边为需要执行的任务</span></span><br><span class="line">- (<span class="keyword">void</span>)run &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建线程后自动启动线程</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建线程后自动启动线程</span></span><br><span class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(run) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新线程调用方法，里边为需要执行的任务</span></span><br><span class="line">- (<span class="keyword">void</span>)run &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>隐式创建并启动线程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 1. 隐式创建并启动线程</span><br><span class="line">[self performSelectorInBackground:@selector(run) withObject:nil];</span><br><span class="line"></span><br><span class="line">// 新线程调用方法，里边为需要执行的任务</span><br><span class="line">- (void)run &#123;</span><br><span class="line">NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-线程相关用法"><a href="#2-2-线程相关用法" class="headerlink" title="2.2 线程相关用法"></a>2.2 线程相关用法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得主线程</span></span><br><span class="line">+ (<span class="built_in">NSThread</span> *)mainThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为主线程(对象方法)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isMainThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为主线程(类方法)</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isMainThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得当前线程</span></span><br><span class="line"><span class="built_in">NSThread</span> *current = [<span class="built_in">NSThread</span> currentThread];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程的名字——setter方法</span></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)n;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程的名字——getter方法</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)name;</span><br></pre></td></tr></table></figure><h2 id="2-3-线程状态控制方法"><a href="#2-3-线程状态控制方法" class="headerlink" title="2.3 线程状态控制方法"></a>2.3 线程状态控制方法</h2><ul><li>启动线程方法</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)start;</span><br><span class="line"><span class="comment">// 线程进入就绪状态 -&gt; 运行状态。当线程任务执行完毕，自动进入死亡状态</span></span><br></pre></td></tr></table></figure><ul><li>阻塞（暂停）线!程方法</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)sleepUntilDate:(<span class="built_in">NSDate</span> *)date;</span><br><span class="line">+ (<span class="keyword">void</span>)sleepForTimeInterval:(<span class="built_in">NSTimeInterval</span>)ti;</span><br><span class="line"><span class="comment">// 线程进入阻塞状态</span></span><br></pre></td></tr></table></figure><ul><li>强制停止线程</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)exit;</span><br><span class="line"><span class="comment">// 线程进入死亡状态</span></span><br></pre></td></tr></table></figure><h2 id="2-4-线程之间的通信"><a href="#2-4-线程之间的通信" class="headerlink" title="2.4 线程之间的通信"></a>2.4 线程之间的通信</h2><p>在开发中，我们经常会在子线程进行耗时操作，操作结束后再回到主线程去刷新 UI。这就涉及到了子线程和主线程之间的通信。我们先来了解一下官方关于 NSThread 的线程间通信的方法。<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主线程上执行操作</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait;</span><br><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)array;</span><br><span class="line"><span class="comment">// equivalent to the first method with kCFRunLoopCommonModes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定线程上执行操作</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="built_in">NSArray</span> *)array <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_5, <span class="number">2</span>_0);</span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_5, <span class="number">2</span>_0);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前线程上执行操作，调用 NSObject 的 performSelector:相关方法</span></span><br><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)aSelector;</span><br><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">id</span>)object;</span><br><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">id</span>)object1 withObject:(<span class="keyword">id</span>)object2;</span><br></pre></td></tr></table></figure><p></p><p>下面通过一个经典的下载图片 DEMO 来展示线程之间的通信。具体步骤如下：</p><ol><li>开启一个子线程，在子线程中下载图片。</li><li>回到主线程刷新 UI，将图片展示在 UIImageView 中。</li></ol><p>DEMO 代码如下：<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 创建一个线程下载图片</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)downloadImageOnSubThread &#123;</span><br><span class="line"><span class="comment">// 在创建的子线程中调用downloadImage下载图片</span></span><br><span class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(downloadImage) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 下载图片，下载完之后回到主线程进行 UI 刷新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)downloadImage &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"current thread -- %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取图片 imageUrl</span></span><br><span class="line"><span class="built_in">NSURL</span> *imageUrl = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-icon.jpg"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 从 imageUrl 中读取数据(下载图片) -- 耗时操作</span></span><br><span class="line"><span class="built_in">NSData</span> *imageData = [<span class="built_in">NSData</span> dataWithContentsOfURL:imageUrl];</span><br><span class="line"><span class="comment">// 通过二进制 data 创建 image</span></span><br><span class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:imageData];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 回到主线程进行图片赋值和界面刷新</span></span><br><span class="line">[<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(refreshOnMainThread:) withObject:image waitUntilDone:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 回到主线程进行图片赋值和界面刷新</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)refreshOnMainThread:(<span class="built_in">UIImage</span> *)image &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"current thread -- %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值图片到imageview</span></span><br><span class="line"><span class="keyword">self</span>.imageView.image = image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="2-5-NSThread-线程安全和线程同步"><a href="#2-5-NSThread-线程安全和线程同步" class="headerlink" title="2.5  NSThread 线程安全和线程同步"></a>2.5 NSThread 线程安全和线程同步</h2><p><strong>线程安全</strong>：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><p><strong>线程同步</strong>：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。</p><p>举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。</p><p>下面，我们模拟火车票售卖的方式，实现 NSThread 线程安全和解决线程同步问题。</p><p>场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。</p><h3 id="2-5-1-NSThread-非线程安全"><a href="#2-5-1-NSThread-非线程安全" class="headerlink" title="2.5.1 NSThread 非线程安全"></a>2.5.1 NSThread 非线程安全</h3><p>先来看看不考虑线程安全的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)initTicketStatusNotSave &#123;</span><br><span class="line"><span class="comment">// 1. 设置剩余火车票为 50</span></span><br><span class="line"><span class="keyword">self</span>.ticketSurplusCount = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置北京火车票售卖窗口的线程</span></span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow1 = [[<span class="built_in">NSThread</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTicketNotSafe) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow1.name = <span class="string">@"北京火车票售票窗口"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置上海火车票售卖窗口的线程</span></span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow2 = [[<span class="built_in">NSThread</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTicketNotSafe) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow2.name = <span class="string">@"上海火车票售票窗口"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 开始售卖火车票</span></span><br><span class="line">[<span class="keyword">self</span>.ticketSaleWindow1 start];</span><br><span class="line">[<span class="keyword">self</span>.ticketSaleWindow2 start];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 售卖火车票(非线程安全)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)saleTicketNotSafe &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//如果还有票，继续售卖</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.ticketSurplusCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">self</span>.ticketSurplusCount --;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"剩余票数：%ld 窗口：%@"</span>, <span class="keyword">self</span>.ticketSurplusCount, [<span class="built_in">NSThread</span> currentThread].name]);</span><br><span class="line">[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已卖完，关闭售票窗口</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"所有火车票均已售完"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后部分结果为：</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-NotSave.png" alt="YSC-phread-NSThread-demo-NotSave.png"></p><p>可以看到在不考虑线程安全的情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。</p><h3 id="2-5-2-NSThread-线程安全"><a href="#2-5-2-NSThread-线程安全" class="headerlink" title="2.5.2 NSThread 线程安全"></a>2.5.2 NSThread 线程安全</h3><p>线程安全解决方案：可以给线程加锁，在一个线程执行该操作的时候，不允许其他线程进行操作。iOS 实现线程加锁有很多种方式。@synchronized、 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、pthread_mutex、dispatch_semaphore、OSSpinLock、atomic(property) set/ge等等各种方式。为了简单起见，这里不对各种锁的解决方案和性能做分析，只用最简单的<code>@synchronized</code>来保证线程安全，从而解决线程同步问题。</p><p>考虑线程安全的代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化火车票数量、卖票窗口(线程安全)、并开始卖票</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)initTicketStatusSave &#123;</span><br><span class="line"><span class="comment">// 1. 设置剩余火车票为 50</span></span><br><span class="line"><span class="keyword">self</span>.ticketSurplusCount = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 设置北京火车票售卖窗口的线程</span></span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow1 = [[<span class="built_in">NSThread</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTicketSafe) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow1.name = <span class="string">@"北京火车票售票窗口"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 设置上海火车票售卖窗口的线程</span></span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow2 = [[<span class="built_in">NSThread</span> alloc]initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(saleTicketSafe) object:<span class="literal">nil</span>];</span><br><span class="line"><span class="keyword">self</span>.ticketSaleWindow2.name = <span class="string">@"上海火车票售票窗口"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 开始售卖火车票</span></span><br><span class="line">[<span class="keyword">self</span>.ticketSaleWindow1 start];</span><br><span class="line">[<span class="keyword">self</span>.ticketSaleWindow2 start];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 售卖火车票(线程安全)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">- (<span class="keyword">void</span>)saleTicketSafe &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 互斥锁</span></span><br><span class="line"><span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line"><span class="comment">//如果还有票，继续售卖</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.ticketSurplusCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">self</span>.ticketSurplusCount --;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"剩余票数：%ld 窗口：%@"</span>, <span class="keyword">self</span>.ticketSurplusCount, [<span class="built_in">NSThread</span> currentThread].name]);</span><br><span class="line">[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果已卖完，关闭售票窗口</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"所有火车票均已售完"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后结果为：</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-Save.png" alt="YSC-phread-NSThread-demo-Save.png"></p><p>省略一部分结果图。。。</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-Save1.png" alt="YSC-phread-NSThread-demo-Save1.png"></p><p>可以看出，在考虑了线程安全的情况下，加锁之后，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。</p><h2 id="2-6-线程的状态转换"><a href="#2-6-线程的状态转换" class="headerlink" title="2.6 线程的状态转换"></a>2.6 线程的状态转换</h2><p>当我们新建一条线程<code>NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</code>，在内存中的表现为：</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange.png" alt="YSC-phread-NSThread-demo-StatusChange.png"></p><p>当调用<code>[thread start];</code>后，系统把线程对象放入可调度线程池中，线程对象进入就绪状态，如下图所示。</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange1.png" alt="YSC-phread-NSThread-demo-StatusChange1.png"></p><p>当然，可调度线程池中，会有其他的线程对象，如下图所示。在这里我们只关心左边的线程对象。</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange2.png" alt="YSC-phread-NSThread-demo-StatusChange2.png"></p><p><strong>下边我们来看看当前线程的状态转换。</strong></p><ul><li>如果CPU现在调度当前线程对象，则当前线程对象进入运行状态，如果CPU调度其他线程对象，则当前线程对象回到就绪状态。</li><li>如果CPU在运行当前线程对象的时候调用了sleep方法\等待同步锁，则当前线程对象就进入了阻塞状态，等到sleep到时\得到同步锁，则回到就绪状态。</li><li>如果CPU在运行当前线程对象的时候线程任务执行完毕\异常强制退出，则当前线程对象进入死亡状态。</li></ul><p>只看文字可能不太好理解，具体当前线程对象的状态变化如下图所示。</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-phread-NSThread-demo-StatusChange3.png" alt="YSC-phread-NSThread-demo-StatusChange3.png"></p><hr><p>iOS多线程详尽总结系列文章：</p><ul><li><a href="https://bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html" target="_blank" rel="noopener">iOS多线程：『pthread、NSThread』详尽总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-GCD.html" target="_blank" rel="noopener">iOS多线程：『GCD』详解总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-NSOperation.html" target="_blank" rel="noopener">iOS多线程：『NSOperation』详解总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-RunLoop.html" target="_blank" rel="noopener">iOS多线程：『RunLoop』详解总结</a></li></ul></div><div><div style="padding:10px 0;margin:20px auto;width:90%;text-align:center"><div>原创不易，随意打赏！</div> <button id="rewardButton" disable="enable" onclick='var qr=document.getElementById("QR");"none"===qr.style.display?qr.style.display="block":qr.style.display="none"'> <span>打赏</span></button><div id="QR" style="display:none"><div id="wechat" style="display:inline-block"> <img id="wechat_qr" src="/images/weixin.png" alt="Walking Boy 微信支付"><p>微信支付</p></div><div id="alipay" style="display:inline-block"> <img id="alipay_qr" src="/images/zhifubao.png" alt="Walking Boy 支付宝"><p>支付宝</p></div></div></div></div><div><ul class="post-copyright"><li class="post-copyright-author"> <strong>本文作者：</strong> Walking Boy</li><li class="post-copyright-link"> <strong>本文链接：</strong> <a href="https://www.bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html" title="iOS多线程：『pthread、NSThread』详尽总结">https://www.bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html</a></li><li class="post-copyright-license"> <strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="external nofollow" target="_blank">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</li></ul></div><footer class="post-footer"><div class="post-tags"><a href="/tags/iOS开发/" rel="tag"><i class="fa fa-tag"></i> iOS开发</a><a href="/tags/iOS多线程/" rel="tag"><i class="fa fa-tag"></i> iOS多线程</a></div><div class="post-nav"><div class="post-nav-next post-nav-item"><a href="/blog/iOS-Resume-Download-AFNetworking.html" rel="next" title="iOS网络--『文件下载、断点下载』的实现（三）：AFNetworking"><i class="fa fa-chevron-left"></i> iOS网络--『文件下载、断点下载』的实现（三）：AFNetworking</a></div><span class="post-nav-divider"></span><div class="post-nav-prev post-nav-item"> <a href="/blog/iOS-Complete-learning-GCD.html" rel="prev" title="iOS多线程：『GCD』详尽总结">iOS多线程：『GCD』详尽总结<i class="fa fa-chevron-right"></i></a></div></div></footer></div></article><div class="post-spread"></div></div></div><div class="comments" id="comments"><div id="lv-container" data-id="city" data-uid="MTAyMC8zMjY2MS85MjIy"></div></div></div><div class="sidebar-toggle"><div class="sidebar-toggle-line-wrap"><span class="sidebar-toggle-line sidebar-toggle-line-first"></span><span class="sidebar-toggle-line sidebar-toggle-line-middle"></span><span class="sidebar-toggle-line sidebar-toggle-line-last"></span></div></div><aside id="sidebar" class="sidebar"><div id="sidebar-dimmer"></div><div class="sidebar-inner"><ul class="sidebar-nav motion-element"><li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap"> 文章目录</li><li class="sidebar-nav-overview" data-target="site-overview-wrap"> 站点概览</li></ul><section class="site-overview-wrap sidebar-panel"><div class="site-overview"><div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person"> <img class="site-author-image" itemprop="image" src="/images/avatar.png" alt="Walking Boy"><p class="site-author-name" itemprop="name">Walking Boy</p><p class="site-description motion-element" itemprop="description">不羁，谓才行高远，不可羁系也。</p></div><nav class="site-state motion-element"><div class="site-state-item site-state-posts"> <a href="/blog/"><span class="site-state-item-count">21</span> <span class="site-state-item-name">日志</span></a></div><div class="site-state-item site-state-categories"> <a href="/categories/index.html"><span class="site-state-item-count">4</span> <span class="site-state-item-name">分类</span></a></div><div class="site-state-item site-state-tags"> <a href="/tags/index.html"><span class="site-state-item-count">25</span> <span class="site-state-item-name">标签</span></a></div></nav><div class="feed-link motion-element"><a href="/atom.xml" rel="alternate"><i class="fa fa-rss"></i> RSS</a></div><div class="category-all-page"><div class="category-all"><ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/hexoBlog/">hexoBlog</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/iOS开发/">iOS开发</a><span class="category-list-count">17</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/诗意生活/">诗意生活</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/读书随笔/">读书随笔</a><span class="category-list-count">2</span></li></ul></div></div><div class="links-of-author motion-element"><span class="links-of-author-item"><a href="https://github.com/lianai911" target="_blank" title="GitHub"><i class="fa fa-fw fa-github"></i> GitHub</a></span><span class="links-of-author-item"><a href="https://blog.csdn.net/lianai911" target="_blank" title="CSDN"><i class="fa fa-fw fa-asterisk"></i> CSDN</a></span><span class="links-of-author-item"><a href="https://douban.com/people/bujige" target="_blank" title="豆瓣"><i class="fa fa-fw fa-heartbeat"></i> 豆瓣</a></span><span class="links-of-author-item"><a href="https://www.jianshu.com/u/6d09d915f1bf" target="_blank" title="简书"><i class="fa fa-fw fa-book"></i> 简书</a></span></div></div></section><section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"><div class="post-toc"><div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#1-pthread"><span class="nav-text">1. pthread</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-1-pthread-简介"><span class="nav-text">1.1 pthread 简介</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#1-2-pthread-使用方法"><span class="nav-text">1.2 pthread 使用方法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#1-3-pthread-其他相关方法"><span class="nav-text">1.3 pthread 其他相关方法</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#2-NSThread"><span class="nav-text">2. NSThread</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-创建、启动线程"><span class="nav-text">2.1 创建、启动线程</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-线程相关用法"><span class="nav-text">2.2 线程相关用法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-3-线程状态控制方法"><span class="nav-text">2.3 线程状态控制方法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-4-线程之间的通信"><span class="nav-text">2.4 线程之间的通信</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-5-NSThread-线程安全和线程同步"><span class="nav-text">2.5 NSThread 线程安全和线程同步</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-5-1-NSThread-非线程安全"><span class="nav-text">2.5.1 NSThread 非线程安全</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-5-2-NSThread-线程安全"><span class="nav-text">2.5.2 NSThread 线程安全</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-6-线程的状态转换"><span class="nav-text">2.6 线程的状态转换</span></a></li></ol></li></ol></div></div></section></div></aside></div></main><footer id="footer" class="footer"><div class="footer-inner"><script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script><div class="copyright">&copy; 2016 &mdash; <span itemprop="copyrightYear">2018</span><span class="with-love"><i class="fa fa-heart"></i></span> <span class="author" itemprop="copyrightHolder">Walking Boy</span></div> <span class="theme-info"><i class="fa fa-user">&nbsp</i><span class="busuanzi-value" id="busuanzi_value_site_uv"></span> 人</span> <span class="post-meta-divider">|</span> <span class="theme-info"><i class="fa fa-eye">&nbsp</i><span class="busuanzi-value" id="busuanzi_value_site_pv"></span> 次</span></div></footer><div class="back-to-top"><i class="fa fa-arrow-up"></i> <span id="scrollpercent"><span>0</span>%</span></div></div><script type="text/javascript">"[object Function]"!==Object.prototype.toString.call(window.Promise)&&(window.Promise=null)</script><script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script><script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script><script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script><script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script><script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script><script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script><script type="text/javascript" src="/js/src/utils.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/motion.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.3"></script><script type="text/javascript">!function(e,t){var c,n=e.getElementsByTagName("script")[0];"function"!=typeof LivereTower&&((c=e.createElement("script")).src="https://cdn-city.livere.com/js/embed.dist.js",c.async=!0,n.parentNode.insertBefore(c,n))}(document)</script><link rel="stylesheet" href="/lib/algolia-instant-search/instantsearch.min.css"><script src="/lib/algolia-instant-search/instantsearch.min.js"></script><script src="/js/src/algolia-search.js?v=5.1.3"></script><script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"></script><script>AV.initialize("peO4GF4o208rtWbreqUoqLBv-gzGzoHsz","Gsb19uSyCroKF3oTzkOJCEEL")</script><script>function showTime(e){var t=new AV.Query(e),n=[],o=$(".leancloud_visitors");o.each(function(){n.push($(this).attr("id").trim())}),t.containedIn("url",n),t.find().done(function(e){var t=".leancloud-visitors-count";if(0!==e.length){for(var i=0;i<e.length;i++){var s=e[i],r=s.get("url"),l=s.get("time"),c=document.getElementById(r);$(c).find(t).text(l)}for(i=0;i<n.length;i++){r=n[i],c=document.getElementById(r);var u=$(c).find(t);""==u.text()&&u.text(0)}}else o.find(t).text(0)}).fail(function(e,t){console.log("Error: "+t.code+" "+t.message)})}function addCount(e){var t=$(".leancloud_visitors"),n=t.attr("id").trim(),o=t.attr("data-flag-title").trim(),i=new AV.Query(e);i.equalTo("url",n),i.find({success:function(t){if(t.length>0){var i=t[0];i.fetchWhenSave(!0),i.increment("time"),i.save(null,{success:function(e){$(document.getElementById(n)).find(".leancloud-visitors-count").text(e.get("time"))},error:function(e,t){console.log("Failed to save Visitor num, with error message: "+t.message)}})}else{var s=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),s.setACL(r),s.set("title",o),s.set("url",n),s.set("time",1),s.save(null,{success:function(e){$(document.getElementById(n)).find(".leancloud-visitors-count").text(e.get("time"))},error:function(e,t){console.log("Failed to create")}})}},error:function(e){console.log("Error:"+e.code+" "+e.message)}})}$(function(){var e=AV.Object.extend("Counter");1==$(".leancloud_visitors").length?addCount(e):$(".post-title-link").length>1&&showTime(e)})</script><script>!function(){var t=document.createElement("script"),e=window.location.protocol.split(":")[0];t.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(t,s)}()</script><div class="bg_content"><canvas id="canvas"></canvas></div><script type="text/javascript" src="/js/src/particleLine.js"></script><script type="text/javascript" src="/js/src/love.js"></script></body></html>