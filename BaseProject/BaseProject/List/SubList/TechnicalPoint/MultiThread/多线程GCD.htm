<!DOCTYPE html><html class="theme-next mist use-motion" lang="zh-Hans"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"><meta name="theme-color" content="#222"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><meta name="google-site-verification" content="GyyB4ty6fbJ2kyKf5PgfMYDshIzkpt4YdoyQhgEd3aM"><meta name="baidu-site-verification" content="zksrRIyR31"><link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css"><link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css"><link href="/css/main.css?v=5.1.3" rel="stylesheet" type="text/css"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-bear.png?v=5.1.3"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-bear.png?v=5.1.3"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-bear.png?v=5.1.3"><link rel="mask-icon" href="/images/logo-bear.svg?v=5.1.3" color="#222"><meta name="title" content="不羁阁 | Walking Boy's Blog"><meta name="keywords" content="iOS开发,iOS多线程,"><link rel="alternate" href="/atom.xml" title="不羁阁 | Walking Boy's Blog" type="application/atom+xml"><script>!function(e,t,o,c,i,a,n){e.DaoVoiceObject=i,e[i]=e[i]||function(){(e[i].q=e[i].q||[]).push(arguments)},e[i].l=1*new Date,a=t.createElement("script"),n=t.getElementsByTagName("script")[0],a.async=1,a.src=c,a.charset="utf-8",n.parentNode.insertBefore(a,n)}(window,document,0,(document.location.protocol,"https://widget.daovoice.io/widget/0f81ff2f.js"),"daovoice"),daovoice("init",{app_id:"47635346"}),daovoice("update")</script><meta name="description" content="本文用来介绍  iOS 多线程中 GCD 的相关知识以及使用方法。这大概是史上最详细、清晰的关于 GCD 的详细讲解+总结的文章了。通过本文，您将了解到：1. GCD 简介2. GCD 任务和队列3. GCD 的使用步骤4. GCD 的基本使用（6种不同组合区别）5. GCD 线程间的通信6. GCD 的其他方法（栅栏方法：dispatch_barrier_async、延时执行方法：dispa"><meta name="keywords" content="iOS开发,iOS多线程"><meta property="og:type" content="article"><meta property="og:title" content="iOS多线程：『GCD』详尽总结"><meta property="og:url" content="https://www.bujige.net/blog/iOS-Complete-learning-GCD.html"><meta property="og:site_name" content="不羁阁 | Walking Boy&#39;s Blog"><meta property="og:description" content="本文用来介绍  iOS 多线程中 GCD 的相关知识以及使用方法。这大概是史上最详细、清晰的关于 GCD 的详细讲解+总结的文章了。通过本文，您将了解到：1. GCD 简介2. GCD 任务和队列3. GCD 的使用步骤4. GCD 的基本使用（6种不同组合区别）5. GCD 线程间的通信6. GCD 的其他方法（栅栏方法：dispatch_barrier_async、延时执行方法：dispa"><meta property="og:locale" content="zh-Hans"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-background.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-DispatchQueue.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-SerialDispatchQueue.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-ConcurrentDispatchQueue.png"><meta property="og:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-barrier.png"><meta property="og:updated_time" content="2018-04-02T05:54:01.157Z"><meta name="twitter:card" content="summary"><meta name="twitter:title" content="iOS多线程：『GCD』详尽总结"><meta name="twitter:description" content="本文用来介绍  iOS 多线程中 GCD 的相关知识以及使用方法。这大概是史上最详细、清晰的关于 GCD 的详细讲解+总结的文章了。通过本文，您将了解到：1. GCD 简介2. GCD 任务和队列3. GCD 的使用步骤4. GCD 的基本使用（6种不同组合区别）5. GCD 线程间的通信6. GCD 的其他方法（栅栏方法：dispatch_barrier_async、延时执行方法：dispa"><meta name="twitter:image" content="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-background.png"><script type="text/javascript" id="hexo.configurations">var NexT=window.NexT||{},CONFIG={root:"/",scheme:"Mist",version:"5.1.3",sidebar:{display:"always",offset:12,b2t:!1,scrollpercent:!0,onmobile:!0},fancybox:!0,tabs:!0,motion:{enable:!0,async:!1,transition:{post_block:"fadeIn",post_header:"slideDownIn",post_body:"slideDownIn",coll_header:"slideLeftIn",sidebar:"slideUpIn"}},duoshuo:{userId:"0",author:"博主"},algolia:{applicationID:"ZB8N71FUJS",apiKey:"2c4a57312b1f34fef40c237b6a387b5b",indexName:"hexoBlogSearch",hits:{per_page:10},labels:{input_placeholder:"请输入关键字",hits_empty:"没有找到与 [${query}] 相关的内容",hits_stats:"${hits} 条相关记录，共耗时 ${time} ms"}}}</script><link rel="canonical" href="https://www.bujige.net/blog/iOS-Complete-learning-GCD.html"><title>iOS多线程：『GCD』详尽总结 | 不羁阁 | Walking Boy's Blog</title><script type="text/javascript">var _hmt=_hmt||[];!function(){var e=document.createElement("script");e.src="https://hm.baidu.com/hm.js?8328f8ab104607263ab419414db4793d";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}()</script></head><body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans"><div class="container page-post-detail"><div class="headband"></div><header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="header-inner"><div class="site-brand-wrapper"><div class="site-meta"><div class="custom-logo-site-title"><a href="/" class="brand" rel="start"><span class="logo-line-before"><i></i></span> <span class="site-title">不羁阁 | Walking Boy's Blog</span><span class="logo-line-after"><i></i></span></a></div><h1 class="site-subtitle" itemprop="description">不羁，谓才行高远，不可羁系也。</h1></div><div class="site-nav-toggle"> <button><span class="btn-bar"></span><span class="btn-bar"></span><span class="btn-bar"></span></button></div></div><nav class="site-nav"><ul id="menu" class="menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="menu-item-icon fa fa-fw fa-home"></i><br> 首页</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="menu-item-icon fa fa-fw fa-user"></i><br> 关于</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="menu-item-icon fa fa-fw fa-th"></i><br> 分类</a></li><li class="menu-item menu-item-archives"><a href="/blog/" rel="section"><i class="menu-item-icon fa fa-fw fa-archive"></i><br> 归档</a></li><li class="menu-item menu-item-search"><a href="javascript:;" class="popup-trigger"><i class="menu-item-icon fa fa-search fa-fw"></i><br> 搜索</a></li></ul><div class="site-search"><div class="algolia-popup popup search-popup"><div class="algolia-search"><div class="algolia-search-input-icon"><i class="fa fa-search"></i></div><div class="algolia-search-input" id="algolia-search-input"></div></div><div class="algolia-results"><div id="algolia-stats"></div><div id="algolia-hits"></div><div id="algolia-pagination" class="algolia-pagination"></div></div><span class="popup-btn-close"><i class="fa fa-times-circle"></i></span></div></div></nav></div></header><main id="main" class="main"><div class="main-inner"><div class="content-wrap"><div id="content" class="content"><div id="posts" class="posts-expand"><article class="post post-type-normal" itemscope itemtype="http://schema.org/Article"><div class="post-block"><link itemprop="mainEntityOfPage" href="https://www.bujige.net/blog/iOS-Complete-learning-GCD.html"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="name" content="Walking Boy"><meta itemprop="description" content="不羁，谓才行高远，不可羁系也。"><meta itemprop="image" content="/images/avatar.png"></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="不羁阁 | Walking Boy's Blog"></span><header class="post-header"><h2 class="post-title" itemprop="name headline">iOS多线程：『GCD』详尽总结</h2><div class="post-meta"><span class="post-time"><span class="post-meta-item-icon"><i class="fa fa-calendar-o"></i></span> <span class="post-meta-item-text">发表于</span> <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-02-24T10:07:40+08:00">2018-02-24</time></span> <span class="post-category"><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-folder-o"></i></span> <span class="post-meta-item-text">分类于</span> <span itemprop="about" itemscope itemtype="http://schema.org/Thing"><a href="/categories/iOS开发/" itemprop="url" rel="index"><span itemprop="name">iOS开发</span></a></span></span> <span id="/blog/iOS-Complete-learning-GCD.html" class="leancloud_visitors" data-flag-title="iOS多线程：『GCD』详尽总结"><span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-eye"></i></span> <span class="post-meta-item-text">阅读次数&#58;</span><span class="leancloud-visitors-count"></span></span><div class="post-wordcount"><span class="post-meta-item-icon"><i class="fa fa-file-word-o"></i></span> <span class="post-meta-item-text">字数统计&#58;</span> <span title="字数统计">11,940 字</span> <span class="post-meta-divider">|</span><span class="post-meta-item-icon"><i class="fa fa-clock-o"></i></span> <span class="post-meta-item-text">阅读时长 &asymp;</span> <span title="阅读时长">52 分钟</span></div></div></header><div class="post-body" itemprop="articleBody"><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-background.png" alt=""></p><blockquote><p>本文用来介绍 iOS 多线程中 GCD 的相关知识以及使用方法。这大概是史上最详细、清晰的关于 GCD 的详细讲解+总结的文章了。通过本文，您将了解到：<br><strong>1. GCD 简介</strong><br><strong>2. GCD 任务和队列</strong><br><strong>3. GCD 的使用步骤</strong><br><strong>4. GCD 的基本使用</strong>（6种不同组合区别）<br><strong>5. GCD 线程间的通信</strong><br><strong>6. GCD 的其他方法</strong>（栅栏方法：dispatch_barrier_async、延时执行方法：dispatch_after、一次性代码（只执行一次）：dispatch_once、快速迭代方法：dispatch_apply、队列组：dispatch_group、信号量：dispatch_semaphore）</p></blockquote><a id="more"></a><blockquote><p>文中 Demo 我已放在了 Github 上，Demo 链接：<a href="https://github.com/bujige/YSC-GCD-demo" target="_blank" rel="noopener">传送门</a></p></blockquote><h1 id="1-GCD-简介"><a href="#1-GCD-简介" class="headerlink" title="1. GCD 简介"></a>1. GCD 简介</h1><p>什么是 GCD 呢？我们先来看看百度百科的解释简单了解下概念</p><blockquote><p>引自<a href="https://baike.baidu.com/item/GCD" target="_blank" rel="noopener">百度百科</a><br><strong>Grand Central Dispatch(GCD)</strong> 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。它是一个在线程池模式的基础上执行的并发任务。在 Mac OS X 10.6 雪豹中首次推出，也可在 iOS 4 及以上版本使用。</p></blockquote><p><strong>为什么要用 GCD 呢？</strong></p><p>因为 GCD 有很多好处啊，具体如下：</p><ul><li>GCD 可用于多核的并行运算</li><li>GCD 会自动利用更多的 CPU 内核（比如双核、四核）</li><li>GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）</li><li>程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码</li></ul><p>既然 GCD 有这么多的好处，那么下面我们就来系统的学习一下 GCD 的使用方法。</p><h1 id="2-GCD-任务和队列"><a href="#2-GCD-任务和队列" class="headerlink" title="2. GCD 任务和队列"></a>2. GCD 任务和队列</h1><p>学习 GCD 之前，先来了解 GCD 中两个核心概念：<strong>任务</strong>和<strong>队列</strong>。</p><p><strong>任务</strong>：就是执行操作的意思，换句话说就是你在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种方式：<strong>同步执行（sync）</strong>和<strong>异步执行（async）</strong>。两者的主要区别是：<strong>是否等待队列的任务执行结束，以及是否具备开启新线程的能力。</strong></p><ul><li><strong>同步执行（sync）</strong>：<ul><li>同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行。</li><li>只能在当前线程中执行任务，不具备开启新线程的能力。</li></ul></li><li><strong>异步执行（async）</strong>：<ul><li>异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务。</li><li>可以在新的线程中执行任务，具备开启新线程的能力。</li></ul></li></ul><p>举个简单例子：你要打电话给小明和小白。<br>同步执行就是，你打电话给小明的时候，不能同时打给小白，等到给小明打完了，才能打给小白（等待任务执行结束）。而且只能用当前的电话（不具备开启新线程的能力）。<br>而异步执行就是，你打电话给小明的时候，不等和小明通话结束，还能直接给小白打电话，不用等着和小明通话结束再打（不用等待任务执行结束）。除了当前电话，你还可以使用其他所能使用的电话（具备开启新线程的能力）。</p><blockquote><p>注意：<strong>异步执行（async）</strong>虽然具有开启新线程的能力，但是并不一定开启新线程。这跟任务所指定的队列类型有关（下面会讲）。</p></blockquote><p><strong>队列（Dispatch Queue）</strong>：这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队列的头部开始读取。每读取一个任务，则从队列中释放一个任务。队列的结构可参考下图：<br><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-DispatchQueue.png" alt="DispatchQueue.png"></p><p>在 GCD 中有两种队列：<strong>串行队列</strong>和<strong>并发队列</strong>。两者都符合 FIFO（先进先出）的原则。两者的主要区别是：<strong>执行顺序不同，以及开启线程数不同。</strong></p><ul><li><strong>串行队列（Serial Dispatch Queue）</strong>：<ul><li>每次只有一个任务被执行。让任务一个接着一个地执行。一个任务执行完毕后，再执行下一个任务。</li><li>只开启一个新线程（或者不开启新线程，在当前线程执行任务）。</li></ul></li><li><strong>并发队列（Concurrent Dispatch Queue）</strong>：<ul><li>可以让多个任务并发（同时）执行。</li><li>可以开启多个线程，并且同时执行任务。</li></ul></li></ul><blockquote><p>注意：<strong>并发队列</strong>的并发功能只有在异步（dispatch_async）函数下才有效。</p></blockquote><p>两者具体区别如下两图所示。</p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-SerialDispatchQueue.png" alt="SerialDispatchQueue.png"></p><p><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-ConcurrentDispatchQueue.png" alt="ConcurrentDispatchQueue.png"></p><h1 id="3-GCD-的使用步骤"><a href="#3-GCD-的使用步骤" class="headerlink" title="3. GCD 的使用步骤"></a>3. GCD 的使用步骤</h1><p>GCD 的使用步骤其实很简单，只有两步。</p><ol><li>创建一个队列（串行队列或并发队列）</li><li>将任务追加到任务的等待队列中，然后系统就会根据任务类型执行任务（同步执行或异步执行）</li></ol><p>下边来看看队列的创建方法/获取方法，以及任务的创建方法。</p><h2 id="3-1-队列的创建方法-获取方法"><a href="#3-1-队列的创建方法-获取方法" class="headerlink" title="3.1 队列的创建方法/获取方法"></a>3.1 队列的创建方法/获取方法</h2><ul><li>可以使用<code>dispatch_queue_create</code>来创建队列，需要传入两个参数，第一个参数表示队列的唯一标识符，用于 DEBUG，可为空，Dispatch Queue 的名称推荐使用应用程序 ID 这种逆序全程域名；第二个参数用来识别是串行队列还是并发队列。<code>DISPATCH_QUEUE_SERIAL</code> 表示串行队列，<code>DISPATCH_QUEUE_CONCURRENT</code> 表示并发队列。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 串行队列的创建方法</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"><span class="comment">// 并发队列的创建方法</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br></pre></td></tr></table></figure><ul><li>对于串行队列，GCD 提供了的一种特殊的串行队列：<strong>主队列（Main Dispatch Queue）</strong>。<ul><li>所有放在主队列中的任务，都会放到主线程中执行。</li><li>可使用<code>dispatch_get_main_queue()</code>获得主队列。</li></ul></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主队列的获取方法</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br></pre></td></tr></table></figure><ul><li>对于并发队列，GCD 默认提供了<strong>全局并发队列（Global Dispatch Queue）</strong>。<ul><li>可以使用<code>dispatch_get_global_queue</code>来获取。需要传入两个参数。第一个参数表示队列优先级，一般用<code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>。第二个参数暂时没用，用<code>0</code>即可。</li></ul></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局并发队列的获取方法</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="3-2-任务的创建方法"><a href="#3-2-任务的创建方法" class="headerlink" title="3.2 任务的创建方法"></a>3.2 任务的创建方法</h2><p>GCD 提供了同步执行任务的创建方法<code>dispatch_sync</code>和异步执行任务创建方法<code>dispatch_async</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步执行任务创建方法</span></span><br><span class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">    <span class="comment">// 这里放同步执行任务代码</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 异步执行任务创建方法</span></span><br><span class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">    <span class="comment">// 这里放异步执行任务代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>虽然使用 GCD 只需两步，但是既然我们有两种队列（串行队列/并发队列），两种任务执行方式（同步执行/异步执行），那么我们就有了四种不同的组合方式。这四种不同的组合方式是：</p><blockquote><ol><li>同步执行 + 并发队列</li><li>异步执行 + 并发队列</li><li>同步执行 + 串行队列</li><li>异步执行 + 串行队列</li></ol></blockquote><p>实际上，刚才还说了两种特殊队列：全局并发队列、主队列。全局并发队列可以作为普通并发队列来使用。但是主队列因为有点特殊，所以我们就又多了两种组合方式。这样就有六种不同的组合方式了。</p><blockquote><ol><li>同步执行 + 主队列</li><li>异步执行 + 主队列</li></ol></blockquote><p>那么这几种不同组合方式各有什么区别呢，这里为了方便，先上结果，再来讲解。你可以直接查看表格结果，然后跳过 <strong>4. GCD的基本使用</strong> 。</p><table><thead><tr><th style="text-align:center">区别</th><th style="text-align:center">并发队列</th><th style="text-align:center">串行队列</th><th style="text-align:center">主队列</th></tr></thead><tbody><tr><td style="text-align:center">同步(sync)</td><td style="text-align:center">没有开启新线程，串行执行任务</td><td style="text-align:center">没有开启新线程，串行执行任务</td><td style="text-align:center">主线程调用：死锁卡住不执行<br>其他线程调用：没有开启新线程，串行执行任务</td></tr><tr><td style="text-align:center">异步(async)</td><td style="text-align:center">有开启新线程，并发执行任务</td><td style="text-align:center">有开启新线程(1条)，串行执行任务</td><td style="text-align:center">没有开启新线程，串行执行任务</td></tr></tbody></table><p>下边我们来分别讲讲这几种不同的组合方式的使用方法。</p><h1 id="4-GCD-的基本使用"><a href="#4-GCD-的基本使用" class="headerlink" title="4. GCD 的基本使用"></a>4. GCD 的基本使用</h1><p><strong>先来讲讲并发队列的两种执行方式。</strong></p><h2 id="4-1-同步执行-并发队列"><a href="#4-1-同步执行-并发队列" class="headerlink" title="4.1 同步执行 + 并发队列"></a>4.1 同步执行 + 并发队列</h2><ul><li>在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步执行 + 并发队列</span></span><br><span class="line"><span class="comment"> * 特点：在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)syncConcurrent &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncConcurrent---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncConcurrent---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:34:55.095932+0800 YSC-GCD-demo[19892:4996930] currentThread—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:34:55.096086+0800 YSC-GCD-demo[19892:4996930] syncConcurrent—begin<br>2018-02-23 20:34:57.097589+0800 YSC-GCD-demo[19892:4996930] 1—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:34:59.099100+0800 YSC-GCD-demo[19892:4996930] 1—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:35:01.099843+0800 YSC-GCD-demo[19892:4996930] 2—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:35:03.101171+0800 YSC-GCD-demo[19892:4996930] 2—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:35:05.101750+0800 YSC-GCD-demo[19892:4996930] 3—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:35:07.102414+0800 YSC-GCD-demo[19892:4996930] 3—<nsthread : 0x60400006bbc0="">{number = 1, name = main}<br>2018-02-23 20:35:07.102575+0800 YSC-GCD-demo[19892:4996930] syncConcurrent—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>从<code>同步执行 + 并发队列</code>中可看到：</p><ul><li>所有任务都是在当前线程（主线程）中执行的，没有开启新的线程（<code>同步执行</code>不具备开启新线程的能力）。</li><li>所有任务都在打印的<code>syncConcurrent---begin</code>和<code>syncConcurrent---end</code>之间执行的（<code>同步任务</code>需要等待队列的任务执行结束）。</li><li>任务按顺序执行的。按顺序执行的原因：虽然<code>并发队列</code>可以开启多个线程，并且同时执行多个任务。但是因为本身不能创建新线程，只有当前线程这一个线程（<code>同步任务</code>不具备开启新线程的能力），所以也就不存在并发。而且当前线程只有等待当前队列中正在执行的任务执行完毕之后，才能继续接着执行下面的操作（<code>同步任务</code>需要等待队列的任务执行结束）。所以任务只能一个接一个按顺序执行，不能同时被执行。</li></ul><h2 id="4-2-异步执行-并发队列"><a href="#4-2-异步执行-并发队列" class="headerlink" title="4.2 异步执行 + 并发队列"></a>4.2 异步执行 + 并发队列</h2><ul><li>可以开启多个线程，任务交替（同时）执行。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步执行 + 并发队列</span></span><br><span class="line"><span class="comment"> * 特点：可以开启多个线程，任务交替（同时）执行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)asyncConcurrent &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncConcurrent---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncConcurrent---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:36:41.769269+0800 YSC-GCD-demo[19929:5005237] currentThread—<nsthread : 0x604000062d80="">{number = 1, name = main}<br>2018-02-23 20:36:41.769496+0800 YSC-GCD-demo[19929:5005237] asyncConcurrent—begin<br>2018-02-23 20:36:41.769725+0800 YSC-GCD-demo[19929:5005237] asyncConcurrent—end<br>2018-02-23 20:36:43.774442+0800 YSC-GCD-demo[19929:5005566] 2—<nsthread : 0x604000266f00="">{number = 5, name = (null)}<br>2018-02-23 20:36:43.774440+0800 YSC-GCD-demo[19929:5005567] 3—<nsthread : 0x60000026f200="">{number = 4, name = (null)}<br>2018-02-23 20:36:43.774440+0800 YSC-GCD-demo[19929:5005565] 1—<nsthread : 0x600000264800="">{number = 3, name = (null)}<br>2018-02-23 20:36:45.779286+0800 YSC-GCD-demo[19929:5005567] 3—<nsthread : 0x60000026f200="">{number = 4, name = (null)}<br>2018-02-23 20:36:45.779302+0800 YSC-GCD-demo[19929:5005565] 1—<nsthread : 0x600000264800="">{number = 3, name = (null)}<br>2018-02-23 20:36:45.779286+0800 YSC-GCD-demo[19929:5005566] 2—<nsthread : 0x604000266f00="">{number = 5, name = (null)}</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在<code>异步执行 + 并发队列</code>中可以看出：</p><ul><li>除了当前线程（主线程），系统又开启了3个线程，并且任务是交替/同时执行的。（<code>异步执行</code>具备开启新线程的能力。且<code>并发队列</code>可开启多个线程，同时执行多个任务）。</li><li>所有任务是在打印的<code>syncConcurrent---begin</code>和<code>syncConcurrent---end</code>之后才执行的。说明当前线程没有等待，而是直接开启了新线程，在新线程中执行任务（<code>异步执行</code>不做等待，可以继续执行任务）。</li></ul><p><strong>接下来再来讲讲串行队列的两种执行方式。</strong></p><h2 id="4-3-同步执行-串行队列"><a href="#4-3-同步执行-串行队列" class="headerlink" title="4.3 同步执行 + 串行队列"></a>4.3 同步执行 + 串行队列</h2><ul><li>不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步执行 + 串行队列</span></span><br><span class="line"><span class="comment"> * 特点：不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)syncSerial &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncSerial---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncSerial---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2018-02-23 20:39:37.876811+0800 YSC-GCD-demo[19975:5017162] currentThread—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:37.876998+0800 YSC-GCD-demo[19975:5017162] syncSerial—begin<br>2018-02-23 20:39:39.878316+0800 YSC-GCD-demo[19975:5017162] 1—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:41.879829+0800 YSC-GCD-demo[19975:5017162] 1—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:43.880660+0800 YSC-GCD-demo[19975:5017162] 2—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:45.881265+0800 YSC-GCD-demo[19975:5017162] 2—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:47.882257+0800 YSC-GCD-demo[19975:5017162] 3—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:49.883008+0800 YSC-GCD-demo[19975:5017162] 3—<nsthread : 0x604000079400="">{number = 1, name = main}<br>2018-02-23 20:39:49.883253+0800 YSC-GCD-demo[19975:5017162] syncSerial—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在<code>同步执行 + 串行队列</code>可以看到：</p><ul><li>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（<code>同步执行</code>不具备开启新线程的能力）。</li><li>所有任务都在打印的<code>syncConcurrent---begin</code>和<code>syncConcurrent---end</code>之间执行（<code>同步任务</code>需要等待队列的任务执行结束）。</li><li>任务是按顺序执行的（<code>串行队列</code>每次只有一个任务被执行，任务一个接一个按顺序执行）。</li></ul><h2 id="4-4-异步执行-串行队列"><a href="#4-4-异步执行-串行队列" class="headerlink" title="4.4 异步执行 + 串行队列"></a>4.4 异步执行 + 串行队列</h2><ul><li>会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步执行 + 串行队列</span></span><br><span class="line"><span class="comment"> * 特点：会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)asyncSerial &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncSerial---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncSerial---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果为：<br>2018-02-23 20:41:17.029999+0800 YSC-GCD-demo[20008:5024757] currentThread—<nsthread : 0x604000070440="">{number = 1, name = main}<br>2018-02-23 20:41:17.030212+0800 YSC-GCD-demo[20008:5024757] asyncSerial—begin<br>2018-02-23 20:41:17.030364+0800 YSC-GCD-demo[20008:5024757] asyncSerial—end<br>2018-02-23 20:41:19.035379+0800 YSC-GCD-demo[20008:5024950] 1—<nsthread : 0x60000026e100="">{number = 3, name = (null)}<br>2018-02-23 20:41:21.037140+0800 YSC-GCD-demo[20008:5024950] 1—<nsthread : 0x60000026e100="">{number = 3, name = (null)}<br>2018-02-23 20:41:23.042220+0800 YSC-GCD-demo[20008:5024950] 2—<nsthread : 0x60000026e100="">{number = 3, name = (null)}<br>2018-02-23 20:41:25.042971+0800 YSC-GCD-demo[20008:5024950] 2—<nsthread : 0x60000026e100="">{number = 3, name = (null)}<br>2018-02-23 20:41:27.047690+0800 YSC-GCD-demo[20008:5024950] 3—<nsthread : 0x60000026e100="">{number = 3, name = (null)}<br>2018-02-23 20:41:29.052327+0800 YSC-GCD-demo[20008:5024950] 3—<nsthread : 0x60000026e100="">{number = 3, name = (null)}</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在<code>异步执行 + 串行队列</code>可以看到：</p><ul><li>开启了一条新线程（<code>异步执行</code>具备开启新线程的能力，<code>串行队列</code>只开启一个线程）。</li><li>所有任务是在打印的<code>syncConcurrent---begin</code>和<code>syncConcurrent---end</code>之后才开始执行的（<code>异步执行</code>不会做任何等待，可以继续执行任务）。</li><li>任务是按顺序执行的（<code>串行队列</code>每次只有一个任务被执行，任务一个接一个按顺序执行）。</li></ul><p>下边讲讲刚才我们提到过的特殊队列：<strong>主队列</strong>。</p><ul><li>主队列：GCD自带的一种特殊的<strong>串行队列</strong><ul><li>所有放在主队列中的任务，都会放到主线程中执行</li><li>可使用<code>dispatch_get_main_queue()</code>获得主队列</li></ul></li></ul><p><strong>我们再来看看主队列的两种组合方式。</strong></p><h2 id="4-5-同步执行-主队列"><a href="#4-5-同步执行-主队列" class="headerlink" title="4.5 同步执行 + 主队列"></a>4.5 同步执行 + 主队列</h2><p><code>同步执行 + 主队列</code>在不同线程中调用结果也是不一样，在主线程中调用会出现死锁，而在其他线程中则不会。</p><h3 id="4-5-1-在主线程中调用同步执行-主队列"><a href="#4-5-1-在主线程中调用同步执行-主队列" class="headerlink" title="4.5.1 在主线程中调用同步执行 + 主队列"></a>4.5.1 在主线程中调用<code>同步执行 + 主队列</code></h3><ul><li>互相等待卡住不可行</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步执行 + 主队列</span></span><br><span class="line"><span class="comment"> * 特点(主线程调用)：互等卡主不执行。</span></span><br><span class="line"><span class="comment"> * 特点(其他线程调用)：不会开启新线程，执行完一个任务，再执行下一个任务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)syncMain &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncMain---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"syncMain---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果<br>2018-02-23 20:42:36.842892+0800 YSC-GCD-demo[20041:5030982] currentThread—<nsthread : 0x600000078a00="">{number = 1, name = main}<br>2018-02-23 20:42:36.843050+0800 YSC-GCD-demo[20041:5030982] syncMain—begin<br>(lldb)</nsthread></p></blockquote><p>在<code>同步执行 + 主队列</code>可以惊奇的发现：</p><ul><li>在主线程中使用<code>同步执行 + 主队列</code>，追加到主线程的任务1、任务2、任务3都不再执行了，而且<code>syncMain---end</code>也没有打印，在XCode 9上还会报崩溃。这是为什么呢？</li></ul><p>这是因为我们在主线程中执行<code>syncMain</code>方法，相当于把<code>syncMain</code>任务放到了主线程的队列中。而<code>同步执行</code>会等待当前队列中的任务执行完毕，才会接着执行。那么当我们把<code>任务1</code>追加到主队列中，<code>任务1</code>就在等待主线程处理完<code>syncMain</code>任务。而<code>syncMain</code>任务需要等待<code>任务1</code>执行完毕，才能接着执行。</p><p>那么，现在的情况就是<code>syncMain</code>任务和<code>任务1</code>都在等对方执行完毕。这样大家互相等待，所以就卡住了，所以我们的任务执行不了，而且<code>syncMain---end</code>也没有打印。</p><p><strong>要是如果不在主线程中调用，而在其他线程中调用会如何呢？</strong></p><h3 id="4-5-2-在其他线程中调用同步执行-主队列"><a href="#4-5-2-在其他线程中调用同步执行-主队列" class="headerlink" title="4.5.2 在其他线程中调用同步执行 + 主队列"></a>4.5.2 在其他线程中调用<code>同步执行 + 主队列</code></h3><ul><li>不会开启新线程，执行完一个任务，再执行下一个任务</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 NSThread 的 detachNewThreadSelector 方法会创建线程，并自动启动线程执行</span></span><br><span class="line"> selector 任务</span><br><span class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(syncMain) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:44:19.377321+0800 YSC-GCD-demo[20083:5040347] currentThread—<nsthread : 0x600000272fc0="">{number = 3, name = (null)}<br>2018-02-23 20:44:19.377494+0800 YSC-GCD-demo[20083:5040347] syncMain—begin<br>2018-02-23 20:44:21.384716+0800 YSC-GCD-demo[20083:5040132] 1—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:23.386091+0800 YSC-GCD-demo[20083:5040132] 1—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:25.387687+0800 YSC-GCD-demo[20083:5040132] 2—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:27.388648+0800 YSC-GCD-demo[20083:5040132] 2—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:29.390459+0800 YSC-GCD-demo[20083:5040132] 3—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:31.391965+0800 YSC-GCD-demo[20083:5040132] 3—<nsthread : 0x60000006c900="">{number = 1, name = main}<br>2018-02-23 20:44:31.392513+0800 YSC-GCD-demo[20083:5040347] syncMain—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在其他线程中使用<code>同步执行 + 主队列</code>可看到：</p><ul><li>所有任务都是在主线程（非当前线程）中执行的，没有开启新的线程（所有放在<code>主队列</code>中的任务，都会放到主线程中执行）。</li><li>所有任务都在打印的<code>syncConcurrent---begin</code>和<code>syncConcurrent---end</code>之间执行（<code>同步任务</code>需要等待队列的任务执行结束）。</li><li>任务是按顺序执行的（主队列是<code>串行队列</code>，每次只有一个任务被执行，任务一个接一个按顺序执行）。</li></ul><p>为什么现在就不会卡住了呢？<br>因为<code>syncMain 任务</code>放到了其他线程里，而<code>任务1</code>、<code>任务2</code>、<code>任务3</code>都在追加到主队列中，这三个任务都会在主线程中执行。<code>syncMain 任务</code>在其他线程中执行到追加<code>任务1</code>到主队列中，因为主队列现在没有正在执行的任务，所以，会直接执行主队列的<code>任务1</code>，等<code>任务1</code>执行完毕，再接着执行<code>任务2</code>、<code>任务3</code>。所以这里不会卡住线程。</p><h2 id="4-6-异步执行-主队列"><a href="#4-6-异步执行-主队列" class="headerlink" title="4.6 异步执行 + 主队列"></a>4.6 异步执行 + 主队列</h2><ul><li>只在主线程中执行任务，执行完一个任务，再执行下一个任务。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步执行 + 主队列</span></span><br><span class="line"><span class="comment"> * 特点：只在主线程中执行任务，执行完一个任务，再执行下一个任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)asyncMain &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncMain---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncMain---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:45:49.981505+0800 YSC-GCD-demo[20111:5046708] currentThread—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:45:49.981935+0800 YSC-GCD-demo[20111:5046708] asyncMain—begin<br>2018-02-23 20:45:49.982352+0800 YSC-GCD-demo[20111:5046708] asyncMain—end<br>2018-02-23 20:45:51.991096+0800 YSC-GCD-demo[20111:5046708] 1—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:45:53.991959+0800 YSC-GCD-demo[20111:5046708] 1—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:45:55.992937+0800 YSC-GCD-demo[20111:5046708] 2—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:45:57.993649+0800 YSC-GCD-demo[20111:5046708] 2—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:45:59.994928+0800 YSC-GCD-demo[20111:5046708] 3—<nsthread : 0x60000006d440="">{number = 1, name = main}<br>2018-02-23 20:46:01.995589+0800 YSC-GCD-demo[20111:5046708] 3—<nsthread : 0x60000006d440="">{number = 1, name = main}</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在<code>异步执行 + 主队列</code>可以看到：</p><ul><li>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（虽然<code>异步执行</code>具备开启线程的能力，但因为是主队列，所以所有任务都在主线程中）。</li><li>所有任务是在打印的syncConcurrent—begin和syncConcurrent—end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。</li><li>任务是按顺序执行的（因为主队列是<code>串行队列</code>，每次只有一个任务被执行，任务一个接一个按顺序执行）。</li></ul><p>弄懂了难理解、绕来绕去的<strong>队列+任务</strong>之后，我们来学习一个简单的东西：<strong>5. GCD 线程间的通信</strong>。</p><h1 id="5-GCD-线程间的通信"><a href="#5-GCD-线程间的通信" class="headerlink" title="5. GCD 线程间的通信"></a>5. GCD 线程间的通信</h1><p>在iOS开发过程中，我们一般在主线程里边进行UI刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程间通信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)communication &#123;</span><br><span class="line">    <span class="comment">// 获取全局并发队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>); </span><br><span class="line">    <span class="comment">// 获取主队列</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> mainQueue = dispatch_get_main_queue(); </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 异步追加任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 回到主线程</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(mainQueue, ^&#123;</span><br><span class="line">            <span class="comment">// 追加在主线程中执行的任务</span></span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:47:03.462394+0800 YSC-GCD-demo[20154:5053282] 1—<nsthread : 0x600000271940="">{number = 3, name = (null)}<br>2018-02-23 20:47:05.465912+0800 YSC-GCD-demo[20154:5053282] 1—<nsthread : 0x600000271940="">{number = 3, name = (null)}<br>2018-02-23 20:47:07.466657+0800 YSC-GCD-demo[20154:5052953] 2—<nsthread : 0x60000007bf80="">{number = 1, name = main}</nsthread></nsthread></nsthread></p></blockquote><ul><li>可以看到在其他线程中先执行任务，执行完了之后回到主线程执行主线程的相应操作。</li></ul><h1 id="6-GCD-的其他方法"><a href="#6-GCD-的其他方法" class="headerlink" title="6. GCD 的其他方法"></a>6. GCD 的其他方法</h1><h2 id="6-1-GCD-栅栏方法：dispatch-barrier-async"><a href="#6-1-GCD-栅栏方法：dispatch-barrier-async" class="headerlink" title="6.1 GCD 栅栏方法：dispatch_barrier_async"></a>6.1 GCD 栅栏方法：dispatch_barrier_async</h2><ul><li>我们有时需要异步执行两组操作，而且第一组操作执行完之后，才能开始执行第二组操作。这样我们就需要一个相当于<code>栅栏</code>一样的一个方法将两组异步执行的操作组给分割起来，当然这里的操作组里可以包含一个或多个任务。这就需要用到<code>dispatch_barrier_async</code>方法在两个操作组间形成栅栏。<br><code>dispatch_barrier_async</code>函数会等待前边追加到并发队列中的任务全部执行完毕之后，再将指定的任务追加到该异步队列中。然后在<code>dispatch_barrier_async</code>函数追加的任务执行完毕之后，异步队列才恢复为一般动作，接着追加任务到该异步队列并开始执行。具体如下图所示：<br><img src="https://ysc-demo-1254961422.file.myqcloud.com/YSC-GCD-demo-barrier.png" alt="dispatch_barrier_async.png"></li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栅栏方法 dispatch_barrier_async</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)barrier &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"net.bujige.testQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_barrier_async(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务 barrier</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"barrier---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);<span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务3</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"4---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:48:18.297745+0800 YSC-GCD-demo[20188:5059274] 1—<nsthread : 0x600000079d80="">{number = 4, name = (null)}<br>2018-02-23 20:48:18.297745+0800 YSC-GCD-demo[20188:5059273] 2—<nsthread : 0x600000079e00="">{number = 3, name = (null)}<br>2018-02-23 20:48:20.301139+0800 YSC-GCD-demo[20188:5059274] 1—<nsthread : 0x600000079d80="">{number = 4, name = (null)}<br>2018-02-23 20:48:20.301139+0800 YSC-GCD-demo[20188:5059273] 2—<nsthread : 0x600000079e00="">{number = 3, name = (null)}<br>2018-02-23 20:48:22.306290+0800 YSC-GCD-demo[20188:5059274] barrier—<nsthread : 0x600000079d80="">{number = 4, name = (null)}<br>2018-02-23 20:48:24.311655+0800 YSC-GCD-demo[20188:5059274] barrier—<nsthread : 0x600000079d80="">{number = 4, name = (null)}<br>2018-02-23 20:48:26.316943+0800 YSC-GCD-demo[20188:5059273] 4—<nsthread : 0x600000079e00="">{number = 3, name = (null)}<br>2018-02-23 20:48:26.316956+0800 YSC-GCD-demo[20188:5059274] 3—<nsthread : 0x600000079d80="">{number = 4, name = (null)}<br>2018-02-23 20:48:28.320660+0800 YSC-GCD-demo[20188:5059273] 4—<nsthread : 0x600000079e00="">{number = 3, name = (null)}<br>2018-02-23 20:48:28.320649+0800 YSC-GCD-demo[20188:5059274] 3—<nsthread : 0x600000079d80="">{number = 4, name = (null)}</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>在<code>dispatch_barrier_async</code>执行结果中可以看出：</p><ul><li>在执行完栅栏前面的操作之后，才执行栅栏操作，最后再执行栅栏后边的操作。</li></ul><h2 id="6-2-GCD-延时执行方法：dispatch-after"><a href="#6-2-GCD-延时执行方法：dispatch-after" class="headerlink" title="6.2 GCD 延时执行方法：dispatch_after"></a>6.2 GCD 延时执行方法：dispatch_after</h2><p>我们经常会遇到这样的需求：在指定时间（例如3秒）之后执行某个任务。可以用 GCD 的<code>dispatch_after</code>函数来实现。<br>需要注意的是：<code>dispatch_after</code>函数并不是在指定时间之后才开始执行处理，而是在指定时间之后将任务追加到主队列中。严格来说，这个时间并不是绝对准确的，但想要大致延迟执行任务，<code>dispatch_after</code>函数是很有效的。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时执行方法 dispatch_after</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)after &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"asyncMain---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="comment">// 2.0秒后异步追加任务代码到主队列，并开始执行</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"after---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 20:53:08.713784+0800 YSC-GCD-demo[20282:5080295] currentThread—<nsthread : 0x60000006ee00="">{number = 1, name = main}<br>2018-02-23 20:53:08.713962+0800 YSC-GCD-demo[20282:5080295] asyncMain—begin<br>2018-02-23 20:53:10.714283+0800 YSC-GCD-demo[20282:5080295] after—<nsthread : 0x60000006ee00="">{number = 1, name = main}</nsthread></nsthread></p></blockquote><p>可以看出：在打印 <code>asyncMain---begin</code> 之后大约 2.0 秒的时间，打印了 <code>after---&lt;NSThread: 0x60000006ee00&gt;{number = 1, name = main}</code></p><h2 id="6-3-GCD-一次性代码（只执行一次）：dispatch-once"><a href="#6-3-GCD-一次性代码（只执行一次）：dispatch-once" class="headerlink" title="6.3 GCD 一次性代码（只执行一次）：dispatch_once"></a>6.3 GCD 一次性代码（只执行一次）：dispatch_once</h2><ul><li>我们在创建单例、或者有整个程序运行过程中只执行一次的代码时，我们就用到了 GCD 的 <code>dispatch_once</code> 函数。使用<br><code>dispatch_once</code> 函数能保证某段代码在程序运行过程中只被执行1次，并且即使在多线程的环境下，<code>dispatch_once</code>也可以保证线程安全。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一次性代码（只执行一次）dispatch_once</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)once &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">// 只执行1次的代码(这里面默认是线程安全的)</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-GCD-快速迭代方法：dispatch-apply"><a href="#6-4-GCD-快速迭代方法：dispatch-apply" class="headerlink" title="6.4 GCD 快速迭代方法：dispatch_apply"></a>6.4 GCD 快速迭代方法：dispatch_apply</h2><ul><li>通常我们会用 for 循环遍历，但是 GCD 给我们提供了快速迭代的函数 <code>dispatch_apply</code>。<code>dispatch_apply</code> 按照指定的次数将指定的任务追加到指定的队列中，并等待全部队列执行结束。</li></ul><p>如果是在串行队列中使用 <code>dispatch_apply</code>，那么就和 for 循环一样，按顺序同步执行。可这样就体现不出快速迭代的意义了。<br>我们可以利用并发队列进行异步执行。比如说遍历 0~5 这6个数字，for 循环的做法是每次取出一个元素，逐个遍历。<code>dispatch_apply</code> 可以 在多个线程中同时（异步）遍历多个数字。<br>还有一点，无论是在串行队列，还是异步队列中，dispatch_apply 都会等待全部任务执行完毕，这点就像是同步操作，也像是队列组中的 <code>dispatch_group_wait</code>方法。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速迭代方法 dispatch_apply</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)apply &#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"apply---begin"</span>);</span><br><span class="line">    dispatch_apply(<span class="number">6</span>, queue, ^(size_t index) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%zd---%@"</span>,index, [<span class="built_in">NSThread</span> currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"apply---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 22:03:18.475499+0800 YSC-GCD-demo[20470:5176805] apply—begin<br>2018-02-23 22:03:18.476672+0800 YSC-GCD-demo[20470:5177035] 1—<nsthread : 0x60000027b8c0="">{number = 3, name = (null)}<br>2018-02-23 22:03:18.476693+0800 YSC-GCD-demo[20470:5176805] 0—<nsthread : 0x604000070640="">{number = 1, name = main}<br>2018-02-23 22:03:18.476704+0800 YSC-GCD-demo[20470:5177037] 2—<nsthread : 0x604000276800="">{number = 4, name = (null)}<br>2018-02-23 22:03:18.476735+0800 YSC-GCD-demo[20470:5177036] 3—<nsthread : 0x60000027b800="">{number = 5, name = (null)}<br>2018-02-23 22:03:18.476867+0800 YSC-GCD-demo[20470:5177035] 4—<nsthread : 0x60000027b8c0="">{number = 3, name = (null)}<br>2018-02-23 22:03:18.476867+0800 YSC-GCD-demo[20470:5176805] 5—<nsthread : 0x604000070640="">{number = 1, name = main}<br>2018-02-23 22:03:18.477038+0800 YSC-GCD-demo[20470:5176805] apply—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>因为是在并发队列中异步队执行任务，所以各个任务的执行时间长短不定，最后结束顺序也不定。但是<code>apply---end</code>一定在最后执行。这是因为<code>dispatch_apply</code>函数会等待全部任务执行完毕。</p><h2 id="6-5-GCD-的队列组：dispatch-group"><a href="#6-5-GCD-的队列组：dispatch-group" class="headerlink" title="6.5 GCD 的队列组：dispatch_group"></a>6.5 GCD 的队列组：dispatch_group</h2><p>有时候我们会有这样的需求：分别异步执行2个耗时任务，然后当2个耗时任务都执行完毕后再回到主线程执行任务。这时候我们可以用到 GCD 的队列组。</p><ul><li>调用队列组的 <code>dispatch_group_async</code> 先把任务放到队列中，然后将队列放入队列组中。或者使用队列组的 <code>dispatch_group_enter、dispatch_group_leave</code> 组合 来实现<br><code>dispatch_group_async</code>。</li><li>调用队列组的 <code>dispatch_group_notify</code> 回到指定线程执行任务。或者使用 <code>dispatch_group_wait</code> 回到当前线程继续向下执行（会阻塞当前线程）。</li></ul><h3 id="6-5-1-dispatch-group-notify"><a href="#6-5-1-dispatch-group-notify" class="headerlink" title="6.5.1 dispatch_group_notify"></a>6.5.1 dispatch_group_notify</h3><ul><li>监听 group 中任务的完成状态，当所有的任务都执行完成后，追加任务到 group 中，并执行任务。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列组 dispatch_group_notify</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)groupNotify &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_t group =  dispatch_group_create();</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="comment">// 等前面的异步任务1、任务2都执行完毕后，回到主线程执行下边任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"group---end"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 22:05:03.790035+0800 YSC-GCD-demo[20494:5183349] currentThread—<nsthread : 0x604000072040="">{number = 1, name = main}<br>2018-02-23 22:05:03.790237+0800 YSC-GCD-demo[20494:5183349] group—begin<br>2018-02-23 22:05:05.792721+0800 YSC-GCD-demo[20494:5183654] 1—<nsthread : 0x60000026f280="">{number = 4, name = (null)}<br>2018-02-23 22:05:05.792725+0800 YSC-GCD-demo[20494:5183656] 2—<nsthread : 0x60000026f240="">{number = 3, name = (null)}<br>2018-02-23 22:05:07.797408+0800 YSC-GCD-demo[20494:5183656] 2—<nsthread : 0x60000026f240="">{number = 3, name = (null)}<br>2018-02-23 22:05:07.797408+0800 YSC-GCD-demo[20494:5183654] 1—<nsthread : 0x60000026f280="">{number = 4, name = (null)}<br>2018-02-23 22:05:09.798717+0800 YSC-GCD-demo[20494:5183349] 3—<nsthread : 0x604000072040="">{number = 1, name = main}<br>2018-02-23 22:05:11.799827+0800 YSC-GCD-demo[20494:5183349] 3—<nsthread : 0x604000072040="">{number = 1, name = main}<br>2018-02-23 22:05:11.799977+0800 YSC-GCD-demo[20494:5183349] group—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>从<code>dispatch_group_notify</code>相关代码运行输出结果可以看出：<br>当所有任务都执行完成之后，才执行<code>dispatch_group_notify</code> block 中的任务。</p><h3 id="6-5-2-dispatch-group-wait"><a href="#6-5-2-dispatch-group-wait" class="headerlink" title="6.5.2 dispatch_group_wait"></a>6.5.2 dispatch_group_wait</h3><ul><li>暂停当前线程（阻塞当前线程），等待指定的 group 中的任务执行完成后，才会往下继续执行。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列组 dispatch_group_wait</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)groupWait &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_t group =  dispatch_group_create();</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_async(group, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待上面的任务全部完成后，会往下继续执行（会阻塞当前线程）</span></span><br><span class="line">    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group---end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 22:10:16.939258+0800 YSC-GCD-demo[20538:5198871] currentThread—<nsthread : 0x600000066780="">{number = 1, name = main}<br>2018-02-23 22:10:16.939455+0800 YSC-GCD-demo[20538:5198871] group—begin<br>2018-02-23 22:10:18.943862+0800 YSC-GCD-demo[20538:5199137] 2—<nsthread : 0x600000464b80="">{number = 4, name = (null)}<br>2018-02-23 22:10:18.943861+0800 YSC-GCD-demo[20538:5199138] 1—<nsthread : 0x604000076640="">{number = 3, name = (null)}<br>2018-02-23 22:10:20.947787+0800 YSC-GCD-demo[20538:5199137] 2—<nsthread : 0x600000464b80="">{number = 4, name = (null)}<br>2018-02-23 22:10:20.947790+0800 YSC-GCD-demo[20538:5199138] 1—<nsthread : 0x604000076640="">{number = 3, name = (null)}<br>2018-02-23 22:10:20.948134+0800 YSC-GCD-demo[20538:5198871] group—end</nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>从<code>dispatch_group_wait</code>相关代码运行输出结果可以看出：<br>当所有任务执行完成之后，才执行 <code>dispatch_group_wait</code> 之后的操作。但是，使用<code>dispatch_group_wait</code> 会阻塞当前线程。</p><h3 id="6-5-3-dispatch-group-enter、dispatch-group-leave"><a href="#6-5-3-dispatch-group-enter、dispatch-group-leave" class="headerlink" title="6.5.3 dispatch_group_enter、dispatch_group_leave"></a>6.5.3 dispatch_group_enter、dispatch_group_leave</h3><ul><li><code>dispatch_group_enter</code> 标志着一个任务追加到 group，执行一次，相当于 group 中未执行完毕任务数+1</li><li><code>dispatch_group_leave</code> 标志着一个任务离开了 group，执行一次，相当于 group 中未执行完毕任务数-1。</li><li>当 group 中未执行完毕任务数为0的时候，才会使<code>dispatch_group_wait</code>解除阻塞，以及执行追加到<code>dispatch_group_notify</code>中的任务。</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列组 dispatch_group_enter、dispatch_group_leave</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)groupEnterAndLeave</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"group---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_t group = dispatch_group_create();</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"2---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="comment">// 等前面的异步操作都执行完毕后，回到主线程.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"3---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"group---end"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    // 等待上面的任务全部完成后，会往下继续执行（会阻塞当前线程）</span></span><br><span class="line"><span class="comment">//    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    NSLog(@"group---end");</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>输出结果：<br>2018-02-23 22:14:17.997667+0800 YSC-GCD-demo[20592:5214830] currentThread—<nsthread : 0x604000066600="">{number = 1, name = main}<br>2018-02-23 22:14:17.997839+0800 YSC-GCD-demo[20592:5214830] group—begin<br>2018-02-23 22:14:20.000298+0800 YSC-GCD-demo[20592:5215094] 1—<nsthread : 0x600000277c80="">{number = 4, name = (null)}<br>2018-02-23 22:14:20.000305+0800 YSC-GCD-demo[20592:5215095] 2—<nsthread : 0x600000277c40="">{number = 3, name = (null)}<br>2018-02-23 22:14:22.001323+0800 YSC-GCD-demo[20592:5215094] 1—<nsthread : 0x600000277c80="">{number = 4, name = (null)}<br>2018-02-23 22:14:22.001339+0800 YSC-GCD-demo[20592:5215095] 2—<nsthread : 0x600000277c40="">{number = 3, name = (null)}<br>2018-02-23 22:14:24.002321+0800 YSC-GCD-demo[20592:5214830] 3—<nsthread : 0x604000066600="">{number = 1, name = main}<br>2018-02-23 22:14:26.002852+0800 YSC-GCD-demo[20592:5214830] 3—<nsthread : 0x604000066600="">{number = 1, name = main}<br>2018-02-23 22:14:26.003116+0800 YSC-GCD-demo[20592:5214830] group—end</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>从<code>dispatch_group_enter、dispatch_group_leave</code>相关代码运行结果中可以看出：当所有任务执行完成之后，才执行 dispatch_group_notify 中的任务。这里的<code>dispatch_group_enter、dispatch_group_leave</code>组合，其实等同于<code>dispatch_group_async</code>。</p><h2 id="6-6-GCD-信号量：dispatch-semaphore"><a href="#6-6-GCD-信号量：dispatch-semaphore" class="headerlink" title="6.6 GCD 信号量：dispatch_semaphore"></a>6.6 GCD 信号量：dispatch_semaphore</h2><p>GCD 中的信号量是指 <strong>Dispatch Semaphore</strong>，是持有计数的信号。类似于过高速路收费站的栏杆。可以通过时，打开栏杆，不可以通过时，关闭栏杆。在 <strong>Dispatch Semaphore</strong> 中，使用计数来完成这个功能，计数为0时等待，不可通过。计数为1或大于1时，计数减1且不等待，可通过。<br><strong>Dispatch Semaphore</strong> 提供了三个函数。</p><ul><li><code>dispatch_semaphore_create</code>：创建一个Semaphore并初始化信号的总量</li><li><code>dispatch_semaphore_signal</code>：发送一个信号，让信号总量加1</li><li><code>dispatch_semaphore_wait</code>：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。</li></ul><blockquote><p>注意：信号量的使用前提是：想清楚你需要处理哪个线程等待（阻塞），又要哪个线程继续执行，然后使用信号量。</p></blockquote><p>Dispatch Semaphore 在实际开发中主要用于：</p><ul><li>保持线程同步，将异步执行任务转换为同步执行任务</li><li>保证线程安全，为线程加锁</li></ul><h3 id="6-6-1-Dispatch-Semaphore-线程同步"><a href="#6-6-1-Dispatch-Semaphore-线程同步" class="headerlink" title="6.6.1 Dispatch Semaphore 线程同步"></a>6.6.1 Dispatch Semaphore 线程同步</h3><p>我们在开发中，会遇到这样的需求：异步执行耗时任务，并使用异步执行的结果进行一些额外的操作。换句话说，相当于，将将异步执行任务转换为同步执行任务。比如说：AFNetworking 中 AFURLSessionManager.m 里面的 <code>tasksForKeyPath:</code> 方法。通过引入信号量的方式，等待异步执行任务结果，获取到 tasks，然后再返回该 tasks。<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)tasksForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    __block <span class="built_in">NSArray</span> *tasks = <span class="literal">nil</span>;</span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">    [<span class="keyword">self</span>.session getTasksWithCompletionHandler:^(<span class="built_in">NSArray</span> *dataTasks, <span class="built_in">NSArray</span> *uploadTasks, <span class="built_in">NSArray</span> *downloadTasks) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(dataTasks))]) &#123;</span><br><span class="line">            tasks = dataTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(uploadTasks))]) &#123;</span><br><span class="line">            tasks = uploadTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(downloadTasks))]) &#123;</span><br><span class="line">            tasks = downloadTasks;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([keyPath isEqualToString:<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(tasks))]) &#123;</span><br><span class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:<span class="string">@"@unionOfArrays.self"</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>下面，我们来利用 Dispatch Semaphore 实现线程同步，将异步执行任务转换为同步执行任务。<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * semaphore 线程同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)semaphoreSync &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"semaphore---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    __block <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">        <span class="comment">// 追加任务1</span></span><br><span class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">2</span>];              <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"1---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);      <span class="comment">// 打印当前线程</span></span><br><span class="line">        </span><br><span class="line">        number = <span class="number">100</span>;</span><br><span class="line">        </span><br><span class="line">        dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"semaphore---end,number = %zd"</span>,number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>输出结果：<br>2018-02-23 22:22:26.521665+0800 YSC-GCD-demo[20642:5246341] currentThread—<nsthread : 0x60400006bc80="">{number = 1, name = main}<br>2018-02-23 22:22:26.521869+0800 YSC-GCD-demo[20642:5246341] semaphore—begin<br>2018-02-23 22:22:28.526841+0800 YSC-GCD-demo[20642:5246638] 1—<nsthread : 0x600000272300="">{number = 3, name = (null)}<br>2018-02-23 22:22:28.527030+0800 YSC-GCD-demo[20642:5246341] semaphore—end,number = 100</nsthread></nsthread></p></blockquote><p>从 Dispatch Semaphore 实现线程同步的代码可以看到：</p><ul><li><code>semaphore---end</code> 是在执行完 <code>number = 100;</code> 之后才打印的。而且输出结果 number 为 100。<br>这是因为<code>异步执行</code>不会做任何等待，可以继续执行任务。<code>异步执行</code>将任务1追加到队列之后，不做等待，接着执行<code>dispatch_semaphore_wait</code>方法。此时 semaphore == 0，当前线程进入等待状态。然后，异步任务1开始执行。任务1执行到<code>dispatch_semaphore_signal</code>之后，总信号量，此时 semaphore == 1，<code>dispatch_semaphore_wait</code>方法使总信号量减1，正在被阻塞的线程（主线程）恢复继续执行。最后打印<code>semaphore---end,number = 100</code>。这样就实现了线程同步，将异步执行任务转换为同步执行任务。</li></ul><h3 id="6-6-2-Dispatch-Semaphore-线程安全和线程同步（为线程加锁）"><a href="#6-6-2-Dispatch-Semaphore-线程安全和线程同步（为线程加锁）" class="headerlink" title="6.6.2 Dispatch Semaphore 线程安全和线程同步（为线程加锁）"></a>6.6.2 Dispatch Semaphore 线程安全和线程同步（为线程加锁）</h3><p><strong>线程安全</strong>：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</p><p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。</p><p><strong>线程同步</strong>：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。</p><p>举个简单例子就是：两个人在一起聊天。两个人不能同时说话，避免听不清(操作冲突)。等一个人说完(一个线程结束操作)，另一个再说(另一个线程再开始操作)。</p><p>下面，我们模拟火车票售卖的方式，实现 NSThread 线程安全和解决线程同步问题。</p><p>场景：总共有50张火车票，有两个售卖火车票的窗口，一个是北京火车票售卖窗口，另一个是上海火车票售卖窗口。两个窗口同时售卖火车票，卖完为止。</p><h4 id="6-6-2-1-非线程安全（不使用-semaphore）"><a href="#6-6-2-1-非线程安全（不使用-semaphore）" class="headerlink" title="6.6.2.1 非线程安全（不使用 semaphore）"></a>6.6.2.1 非线程安全（不使用 semaphore）</h4><p>先来看看不考虑线程安全的代码：<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非线程安全：不使用 semaphore</span></span><br><span class="line"><span class="comment"> * 初始化火车票数量、卖票窗口(非线程安全)、并开始卖票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)initTicketStatusNotSave &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"semaphore---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.ticketSurplusCount = <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// queue1 代表北京火车票售卖窗口</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue1 = dispatch_queue_create(<span class="string">"net.bujige.testQueue1"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    <span class="comment">// queue2 代表上海火车票售卖窗口</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue2 = dispatch_queue_create(<span class="string">"net.bujige.testQueue2"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue1, ^&#123;</span><br><span class="line">        [weakSelf saleTicketNotSafe];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue2, ^&#123;</span><br><span class="line">        [weakSelf saleTicketNotSafe];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售卖火车票(非线程安全)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)saleTicketNotSafe &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.ticketSurplusCount &gt; <span class="number">0</span>) &#123;  <span class="comment">//如果还有票，继续售卖</span></span><br><span class="line">            <span class="keyword">self</span>.ticketSurplusCount--;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"剩余票数：%d 窗口：%@"</span>, <span class="keyword">self</span>.ticketSurplusCount, [<span class="built_in">NSThread</span> currentThread]]);</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果已卖完，关闭售票窗口</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"所有火车票均已售完"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>输出结果（部分）：<br>2018-02-23 22:25:35.789072+0800 YSC-GCD-demo[20712:5258914] currentThread—<nsthread : 0x604000068880="">{number = 1, name = main}<br>2018-02-23 22:25:35.789260+0800 YSC-GCD-demo[20712:5258914] semaphore—begin<br>2018-02-23 22:25:35.789641+0800 YSC-GCD-demo[20712:5259176] 剩余票数：48 窗口：<nsthread : 0x60000027db80="">{number = 3, name = (null)}<br>2018-02-23 22:25:35.789646+0800 YSC-GCD-demo[20712:5259175] 剩余票数：49 窗口：<nsthread : 0x60000027e740="">{number = 4, name = (null)}<br>2018-02-23 22:25:35.994113+0800 YSC-GCD-demo[20712:5259175] 剩余票数：47 窗口：<nsthread : 0x60000027e740="">{number = 4, name = (null)}<br>2018-02-23 22:25:35.994129+0800 YSC-GCD-demo[20712:5259176] 剩余票数：46 窗口：<nsthread : 0x60000027db80="">{number = 3, name = (null)}<br>2018-02-23 22:25:36.198993+0800 YSC-GCD-demo[20712:5259176] 剩余票数：45 窗口：<nsthread : 0x60000027db80="">{number = 3, name = (null)}<br>…</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>可以看到在不考虑线程安全，不使用 semaphore 的情况下，得到票数是错乱的，这样显然不符合我们的需求，所以我们需要考虑线程安全问题。</p><h4 id="6-6-2-2-线程安全（使用-semaphore-加锁）"><a href="#6-6-2-2-线程安全（使用-semaphore-加锁）" class="headerlink" title="6.6.2.2 线程安全（使用 semaphore 加锁）"></a>6.6.2.2 线程安全（使用 semaphore 加锁）</h4><p>考虑线程安全的代码：<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全：使用 semaphore 加锁</span></span><br><span class="line"><span class="comment"> * 初始化火车票数量、卖票窗口(线程安全)、并开始卖票</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)initTicketStatusSave &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentThread---%@"</span>,[<span class="built_in">NSThread</span> currentThread]);  <span class="comment">// 打印当前线程</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"semaphore---begin"</span>);</span><br><span class="line">    </span><br><span class="line">    semaphoreLock = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.ticketSurplusCount = <span class="number">50</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// queue1 代表北京火车票售卖窗口</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue1 = dispatch_queue_create(<span class="string">"net.bujige.testQueue1"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    <span class="comment">// queue2 代表上海火车票售卖窗口</span></span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> queue2 = dispatch_queue_create(<span class="string">"net.bujige.testQueue2"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue1, ^&#123;</span><br><span class="line">        [weakSelf saleTicketSafe];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dispatch_async</span>(queue2, ^&#123;</span><br><span class="line">        [weakSelf saleTicketSafe];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售卖火车票(线程安全)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)saleTicketSafe &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 相当于加锁</span></span><br><span class="line">        dispatch_semaphore_wait(semaphoreLock, DISPATCH_TIME_FOREVER);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.ticketSurplusCount &gt; <span class="number">0</span>) &#123;  <span class="comment">//如果还有票，继续售卖</span></span><br><span class="line">            <span class="keyword">self</span>.ticketSurplusCount--;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"剩余票数：%d 窗口：%@"</span>, <span class="keyword">self</span>.ticketSurplusCount, [<span class="built_in">NSThread</span> currentThread]]);</span><br><span class="line">            [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果已卖完，关闭售票窗口</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"所有火车票均已售完"</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 相当于解锁</span></span><br><span class="line">            dispatch_semaphore_signal(semaphoreLock);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 相当于解锁</span></span><br><span class="line">        dispatch_semaphore_signal(semaphoreLock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>输出结果为：<br>2018-02-23 22:32:19.814232+0800 YSC-GCD-demo[20862:5290531] currentThread—<nsthread : 0x6000000783c0="">{number = 1, name = main}<br>2018-02-23 22:32:19.814412+0800 YSC-GCD-demo[20862:5290531] semaphore—begin<br>2018-02-23 22:32:19.814837+0800 YSC-GCD-demo[20862:5290687] 剩余票数：49 窗口：<nsthread : 0x6040002709c0="">{number = 3, name = (null)}<br>2018-02-23 22:32:20.017745+0800 YSC-GCD-demo[20862:5290689] 剩余票数：48 窗口：<nsthread : 0x60000046c640="">{number = 4, name = (null)}<br>2018-02-23 22:32:20.222039+0800 YSC-GCD-demo[20862:5290687] 剩余票数：47 窗口：<nsthread : 0x6040002709c0="">{number = 3, name = (null)}<br>…<br>2018-02-23 22:32:29.024817+0800 YSC-GCD-demo[20862:5290689] 剩余票数：4 窗口：<nsthread : 0x60000046c640="">{number = 4, name = (null)}<br>2018-02-23 22:32:29.230110+0800 YSC-GCD-demo[20862:5290687] 剩余票数：3 窗口：<nsthread : 0x6040002709c0="">{number = 3, name = (null)}<br>2018-02-23 22:32:29.433615+0800 YSC-GCD-demo[20862:5290689] 剩余票数：2 窗口：<nsthread : 0x60000046c640="">{number = 4, name = (null)}<br>2018-02-23 22:32:29.637572+0800 YSC-GCD-demo[20862:5290687] 剩余票数：1 窗口：<nsthread : 0x6040002709c0="">{number = 3, name = (null)}<br>2018-02-23 22:32:29.840234+0800 YSC-GCD-demo[20862:5290689] 剩余票数：0 窗口：<nsthread : 0x60000046c640="">{number = 4, name = (null)}<br>2018-02-23 22:32:30.044960+0800 YSC-GCD-demo[20862:5290687] 所有火车票均已售完<br>2018-02-23 22:32:30.045260+0800 YSC-GCD-demo[20862:5290689] 所有火车票均已售完</nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></nsthread></p></blockquote><p>可以看出，在考虑了线程安全的情况下，使用 <code>dispatch_semaphore</code><br> 机制之后，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。</p><hr><p>参考资料：</p><ul><li><a href="https://blog.csdn.net/liuyang11908/article/details/70757534" target="_blank" rel="noopener">iOS GCD之dispatch_semaphore（信号量）</a></li></ul><hr><p>iOS多线程详尽总结系列文章：</p><ul><li><a href="https://bujige.net/blog/iOS-Complete-learning-pthread-and-NSThread.html" target="_blank" rel="noopener">iOS多线程：『pthread、NSThread』详尽总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-GCD.html" target="_blank" rel="noopener">iOS多线程：『GCD』详解总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-NSOperation.html" target="_blank" rel="noopener">iOS多线程：『NSOperation』详解总结</a></li><li><a href="https://bujige.net/blog/iOS-Complete-learning-RunLoop.html" target="_blank" rel="noopener">iOS多线程：『RunLoop』详解总结</a></li></ul></div><div><div style="padding:10px 0;margin:20px auto;width:90%;text-align:center"><div>原创不易，随意打赏！</div> <button id="rewardButton" disable="enable" onclick='var qr=document.getElementById("QR");"none"===qr.style.display?qr.style.display="block":qr.style.display="none"'> <span>打赏</span></button><div id="QR" style="display:none"><div id="wechat" style="display:inline-block"> <img id="wechat_qr" src="/images/weixin.png" alt="Walking Boy 微信支付"><p>微信支付</p></div><div id="alipay" style="display:inline-block"> <img id="alipay_qr" src="/images/zhifubao.png" alt="Walking Boy 支付宝"><p>支付宝</p></div></div></div></div><div><ul class="post-copyright"><li class="post-copyright-author"> <strong>本文作者：</strong> Walking Boy</li><li class="post-copyright-link"> <strong>本文链接：</strong> <a href="https://www.bujige.net/blog/iOS-Complete-learning-GCD.html" title="iOS多线程：『GCD』详尽总结">https://www.bujige.net/blog/iOS-Complete-learning-GCD.html</a></li><li class="post-copyright-license"> <strong>版权声明：</strong> 本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="external nofollow" target="_blank">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</li></ul></div><footer class="post-footer"><div class="post-tags"><a href="/tags/iOS开发/" rel="tag"><i class="fa fa-tag"></i> iOS开发</a><a href="/tags/iOS多线程/" rel="tag"><i class="fa fa-tag"></i> iOS多线程</a></div><div class="post-nav"><div class="post-nav-next post-nav-item"><a href="/blog/iOS-Complete-learning-pthread-and-NSThread.html" rel="next" title="iOS多线程：『pthread、NSThread』详尽总结"><i class="fa fa-chevron-left"></i> iOS多线程：『pthread、NSThread』详尽总结</a></div><span class="post-nav-divider"></span><div class="post-nav-prev post-nav-item"> <a href="/blog/iOS-Complete-learning-NSOperation.html" rel="prev" title="iOS多线程：『NSOperation、NSOperationQueue』详尽总结">iOS多线程：『NSOperation、NSOperationQueue』详尽总结<i class="fa fa-chevron-right"></i></a></div></div></footer></div></article><div class="post-spread"></div></div></div><div class="comments" id="comments"><div id="lv-container" data-id="city" data-uid="MTAyMC8zMjY2MS85MjIy"></div></div></div><div class="sidebar-toggle"><div class="sidebar-toggle-line-wrap"><span class="sidebar-toggle-line sidebar-toggle-line-first"></span><span class="sidebar-toggle-line sidebar-toggle-line-middle"></span><span class="sidebar-toggle-line sidebar-toggle-line-last"></span></div></div><aside id="sidebar" class="sidebar"><div id="sidebar-dimmer"></div><div class="sidebar-inner"><ul class="sidebar-nav motion-element"><li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap"> 文章目录</li><li class="sidebar-nav-overview" data-target="site-overview-wrap"> 站点概览</li></ul><section class="site-overview-wrap sidebar-panel"><div class="site-overview"><div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person"> <img class="site-author-image" itemprop="image" src="/images/avatar.png" alt="Walking Boy"><p class="site-author-name" itemprop="name">Walking Boy</p><p class="site-description motion-element" itemprop="description">不羁，谓才行高远，不可羁系也。</p></div><nav class="site-state motion-element"><div class="site-state-item site-state-posts"> <a href="/blog/"><span class="site-state-item-count">21</span> <span class="site-state-item-name">日志</span></a></div><div class="site-state-item site-state-categories"> <a href="/categories/index.html"><span class="site-state-item-count">4</span> <span class="site-state-item-name">分类</span></a></div><div class="site-state-item site-state-tags"> <a href="/tags/index.html"><span class="site-state-item-count">25</span> <span class="site-state-item-name">标签</span></a></div></nav><div class="feed-link motion-element"><a href="/atom.xml" rel="alternate"><i class="fa fa-rss"></i> RSS</a></div><div class="category-all-page"><div class="category-all"><ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="/categories/hexoBlog/">hexoBlog</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/iOS开发/">iOS开发</a><span class="category-list-count">17</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/诗意生活/">诗意生活</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="/categories/读书随笔/">读书随笔</a><span class="category-list-count">2</span></li></ul></div></div><div class="links-of-author motion-element"><span class="links-of-author-item"><a href="https://github.com/lianai911" target="_blank" title="GitHub"><i class="fa fa-fw fa-github"></i> GitHub</a></span><span class="links-of-author-item"><a href="https://blog.csdn.net/lianai911" target="_blank" title="CSDN"><i class="fa fa-fw fa-asterisk"></i> CSDN</a></span><span class="links-of-author-item"><a href="https://douban.com/people/bujige" target="_blank" title="豆瓣"><i class="fa fa-fw fa-heartbeat"></i> 豆瓣</a></span><span class="links-of-author-item"><a href="https://www.jianshu.com/u/6d09d915f1bf" target="_blank" title="简书"><i class="fa fa-fw fa-book"></i> 简书</a></span></div></div></section><section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active"><div class="post-toc"><div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#1-GCD-简介"><span class="nav-text">1. GCD 简介</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#2-GCD-任务和队列"><span class="nav-text">2. GCD 任务和队列</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#3-GCD-的使用步骤"><span class="nav-text">3. GCD 的使用步骤</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#3-1-队列的创建方法-获取方法"><span class="nav-text">3.1 队列的创建方法/获取方法</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-2-任务的创建方法"><span class="nav-text">3.2 任务的创建方法</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#4-GCD-的基本使用"><span class="nav-text">4. GCD 的基本使用</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#4-1-同步执行-并发队列"><span class="nav-text">4.1 同步执行 + 并发队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-2-异步执行-并发队列"><span class="nav-text">4.2 异步执行 + 并发队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-3-同步执行-串行队列"><span class="nav-text">4.3 同步执行 + 串行队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-4-异步执行-串行队列"><span class="nav-text">4.4 异步执行 + 串行队列</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-5-同步执行-主队列"><span class="nav-text">4.5 同步执行 + 主队列</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#4-5-1-在主线程中调用同步执行-主队列"><span class="nav-text">4.5.1 在主线程中调用同步执行 + 主队列</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-5-2-在其他线程中调用同步执行-主队列"><span class="nav-text">4.5.2 在其他线程中调用同步执行 + 主队列</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-6-异步执行-主队列"><span class="nav-text">4.6 异步执行 + 主队列</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#5-GCD-线程间的通信"><span class="nav-text">5. GCD 线程间的通信</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#6-GCD-的其他方法"><span class="nav-text">6. GCD 的其他方法</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#6-1-GCD-栅栏方法：dispatch-barrier-async"><span class="nav-text">6.1 GCD 栅栏方法：dispatch_barrier_async</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6-2-GCD-延时执行方法：dispatch-after"><span class="nav-text">6.2 GCD 延时执行方法：dispatch_after</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6-3-GCD-一次性代码（只执行一次）：dispatch-once"><span class="nav-text">6.3 GCD 一次性代码（只执行一次）：dispatch_once</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6-4-GCD-快速迭代方法：dispatch-apply"><span class="nav-text">6.4 GCD 快速迭代方法：dispatch_apply</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6-5-GCD-的队列组：dispatch-group"><span class="nav-text">6.5 GCD 的队列组：dispatch_group</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#6-5-1-dispatch-group-notify"><span class="nav-text">6.5.1 dispatch_group_notify</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-5-2-dispatch-group-wait"><span class="nav-text">6.5.2 dispatch_group_wait</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-5-3-dispatch-group-enter、dispatch-group-leave"><span class="nav-text">6.5.3 dispatch_group_enter、dispatch_group_leave</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#6-6-GCD-信号量：dispatch-semaphore"><span class="nav-text">6.6 GCD 信号量：dispatch_semaphore</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#6-6-1-Dispatch-Semaphore-线程同步"><span class="nav-text">6.6.1 Dispatch Semaphore 线程同步</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#6-6-2-Dispatch-Semaphore-线程安全和线程同步（为线程加锁）"><span class="nav-text">6.6.2 Dispatch Semaphore 线程安全和线程同步（为线程加锁）</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#6-6-2-1-非线程安全（不使用-semaphore）"><span class="nav-text">6.6.2.1 非线程安全（不使用 semaphore）</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#6-6-2-2-线程安全（使用-semaphore-加锁）"><span class="nav-text">6.6.2.2 线程安全（使用 semaphore 加锁）</span></a></li></ol></li></ol></li></ol></li></ol></div></div></section></div></aside></div></main><footer id="footer" class="footer"><div class="footer-inner"><script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script><div class="copyright">&copy; 2016 &mdash; <span itemprop="copyrightYear">2018</span><span class="with-love"><i class="fa fa-heart"></i></span> <span class="author" itemprop="copyrightHolder">Walking Boy</span></div> <span class="theme-info"><i class="fa fa-user">&nbsp</i><span class="busuanzi-value" id="busuanzi_value_site_uv"></span> 人</span> <span class="post-meta-divider">|</span> <span class="theme-info"><i class="fa fa-eye">&nbsp</i><span class="busuanzi-value" id="busuanzi_value_site_pv"></span> 次</span></div></footer><div class="back-to-top"><i class="fa fa-arrow-up"></i> <span id="scrollpercent"><span>0</span>%</span></div></div><script type="text/javascript">"[object Function]"!==Object.prototype.toString.call(window.Promise)&&(window.Promise=null)</script><script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script><script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script><script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script><script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script><script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script><script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script><script type="text/javascript" src="/js/src/utils.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/motion.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/post-details.js?v=5.1.3"></script><script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.3"></script><script type="text/javascript">!function(e,t){var c,n=e.getElementsByTagName("script")[0];"function"!=typeof LivereTower&&((c=e.createElement("script")).src="https://cdn-city.livere.com/js/embed.dist.js",c.async=!0,n.parentNode.insertBefore(c,n))}(document)</script><link rel="stylesheet" href="/lib/algolia-instant-search/instantsearch.min.css"><script src="/lib/algolia-instant-search/instantsearch.min.js"></script><script src="/js/src/algolia-search.js?v=5.1.3"></script><script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"></script><script>AV.initialize("peO4GF4o208rtWbreqUoqLBv-gzGzoHsz","Gsb19uSyCroKF3oTzkOJCEEL")</script><script>function showTime(e){var t=new AV.Query(e),n=[],o=$(".leancloud_visitors");o.each(function(){n.push($(this).attr("id").trim())}),t.containedIn("url",n),t.find().done(function(e){var t=".leancloud-visitors-count";if(0!==e.length){for(var i=0;i<e.length;i++){var s=e[i],r=s.get("url"),l=s.get("time"),c=document.getElementById(r);$(c).find(t).text(l)}for(i=0;i<n.length;i++){r=n[i],c=document.getElementById(r);var u=$(c).find(t);""==u.text()&&u.text(0)}}else o.find(t).text(0)}).fail(function(e,t){console.log("Error: "+t.code+" "+t.message)})}function addCount(e){var t=$(".leancloud_visitors"),n=t.attr("id").trim(),o=t.attr("data-flag-title").trim(),i=new AV.Query(e);i.equalTo("url",n),i.find({success:function(t){if(t.length>0){var i=t[0];i.fetchWhenSave(!0),i.increment("time"),i.save(null,{success:function(e){$(document.getElementById(n)).find(".leancloud-visitors-count").text(e.get("time"))},error:function(e,t){console.log("Failed to save Visitor num, with error message: "+t.message)}})}else{var s=new e,r=new AV.ACL;r.setPublicReadAccess(!0),r.setPublicWriteAccess(!0),s.setACL(r),s.set("title",o),s.set("url",n),s.set("time",1),s.save(null,{success:function(e){$(document.getElementById(n)).find(".leancloud-visitors-count").text(e.get("time"))},error:function(e,t){console.log("Failed to create")}})}},error:function(e){console.log("Error:"+e.code+" "+e.message)}})}$(function(){var e=AV.Object.extend("Counter");1==$(".leancloud_visitors").length?addCount(e):$(".post-title-link").length>1&&showTime(e)})</script><script>!function(){var t=document.createElement("script"),e=window.location.protocol.split(":")[0];t.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(t,s)}()</script><div class="bg_content"><canvas id="canvas"></canvas></div><script type="text/javascript" src="/js/src/particleLine.js"></script><script type="text/javascript" src="/js/src/love.js"></script></body></html>